{"ast":null,"code":"import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\nexport const useTrafficStore = create(set => {\n  const fetchTrafficUpdates = async () => {\n    try {\n      var _data$RESPONSE, _data$RESPONSE$RESULT, _data$RESPONSE$RESULT2;\n      // Hämta location från useLocationStore\n      const {\n        location\n      } = useLocationStore.getState();\n      console.log(\"Location in TrafficStore:\", location);\n      if (!location) {\n        console.error(\"Location is not set. Cannot fetch traffic updates.\");\n        return;\n      }\n      const {\n        latitude,\n        longitude\n      } = location;\n      console.log(\"Fetching traffic updates for:\", latitude, longitude);\n\n      // Hämta trafikdata från backend (API-anropet)\n      const data = await fetchTrafficUpdatesData(latitude, longitude);\n      console.log(\"Full API response:\", data); // För att debugga och se hela svaret\n\n      // Försök att få trafikuppdateringar från responsen\n      const situations = ((_data$RESPONSE = data.RESPONSE) === null || _data$RESPONSE === void 0 ? void 0 : (_data$RESPONSE$RESULT = _data$RESPONSE.RESULT) === null || _data$RESPONSE$RESULT === void 0 ? void 0 : (_data$RESPONSE$RESULT2 = _data$RESPONSE$RESULT[0]) === null || _data$RESPONSE$RESULT2 === void 0 ? void 0 : _data$RESPONSE$RESULT2.Situation) || []; // Säkerställ att det är en array\n\n      // Kontrollera om situations är en array innan vi använder flatMap\n      const extractedUpdates = Array.isArray(situations) ? situations.flatMap(situation => {\n        if (situation.Deviation && Array.isArray(situation.Deviation)) {\n          return situation.Deviation.map(deviation => ({\n            MessageCode: deviation.MessageCode,\n            Message: deviation.Message,\n            SeverityText: deviation.SeverityText,\n            CreationTime: deviation.CreationTime,\n            LocationDescriptor: deviation.LocationDescriptor\n          }));\n        }\n        return []; // Om Deviation inte är en array, returnera en tom array\n      }) : []; // Om det inte är en array, sätt till tom array\n\n      // Uppdatera state med de extraherade trafikuppdateringarna\n      set({\n        trafficUpdates: extractedUpdates\n      });\n      console.log(\"Fetched traffic updates:\", extractedUpdates);\n    } catch (error) {\n      console.error(\"Failed to load data:\", error);\n    }\n  };\n  return {\n    trafficUpdates: [],\n    fetchTrafficUpdates\n  };\n});\n\n// export const useTrafficStore = create<TrafficState>((set) => {\n//   const fetchTrafficUpdates = async () => {\n//     try {\n//       const { location } = useLocationStore.getState();\n//       console.log(\"Location in TrafficStore:\", location);\n\n//       if (!location) {\n//         console.error(\"Location is not set. Cannot fetch traffic updates.\");\n//         return;\n//       }\n\n//       const { latitude, longitude } = location;\n//       console.log(\"Fetching traffic updates for:\", latitude, longitude);\n\n//       const data = await fetchTrafficUpdatesData(latitude, longitude);\n//       const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n\n//       const extractedUpdates: TrafficUpdate[] = situations.flatMap(\n//         (situation: any) =>\n//           situation.Deviation.map((deviation: any) => ({\n//             MessageCode: deviation.MessageCode,\n//             Message: deviation.Message,\n//             SeverityText: deviation.SeverityText,\n//             CreationTime: deviation.CreationTime,\n//             LocationDescriptor: deviation.LocationDescriptor,\n//           }))\n//       );\n\n//       set({ trafficUpdates: extractedUpdates });\n\n//       console.log(\"Fetched traffic updates:\", extractedUpdates);\n//     } catch (error) {\n//       console.error(\"Failed to load data:\", error);\n//     }\n//   };\n\n//   return {\n//     trafficUpdates: [],\n//     fetchTrafficUpdates,\n//   };\n// });","map":{"version":3,"names":["create","fetchTrafficUpdatesData","useLocationStore","useTrafficStore","set","fetchTrafficUpdates","_data$RESPONSE","_data$RESPONSE$RESULT","_data$RESPONSE$RESULT2","location","getState","console","log","error","latitude","longitude","data","situations","RESPONSE","RESULT","Situation","extractedUpdates","Array","isArray","flatMap","situation","Deviation","map","deviation","MessageCode","Message","SeverityText","CreationTime","LocationDescriptor","trafficUpdates"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/store/useTrafficStore.tsx"],"sourcesContent":["import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\n\nexport interface TrafficUpdate {\n  MessageCode: string;\n  Message: string;\n  SeverityText: string;\n  CreationTime: string;\n  LocationDescriptor: string;\n  Geometry?: {\n    WGS84: string;\n  };\n}\n\nexport interface TrafficState {\n    trafficUpdates: TrafficUpdate[];\n    fetchTrafficUpdates: () => Promise<void>;\n  }\n\n  export const useTrafficStore = create<TrafficState>((set) => {\n    const fetchTrafficUpdates = async () => {\n      try {\n        // Hämta location från useLocationStore\n        const { location } = useLocationStore.getState();\n        console.log(\"Location in TrafficStore:\", location);\n  \n        if (!location) {\n          console.error(\"Location is not set. Cannot fetch traffic updates.\");\n          return;\n        }\n  \n        const { latitude, longitude } = location;\n        console.log(\"Fetching traffic updates for:\", latitude, longitude);\n  \n        // Hämta trafikdata från backend (API-anropet)\n        const data = await fetchTrafficUpdatesData(latitude, longitude);\n        console.log(\"Full API response:\", data);  // För att debugga och se hela svaret\n  \n        // Försök att få trafikuppdateringar från responsen\n        const situations = data.RESPONSE?.RESULT?.[0]?.Situation || [];  // Säkerställ att det är en array\n  \n        // Kontrollera om situations är en array innan vi använder flatMap\n        const extractedUpdates: TrafficUpdate[] = Array.isArray(situations) ? situations.flatMap(\n          (situation: any) => {\n            if (situation.Deviation && Array.isArray(situation.Deviation)) {\n              return situation.Deviation.map((deviation: any) => ({\n                MessageCode: deviation.MessageCode,\n                Message: deviation.Message,\n                SeverityText: deviation.SeverityText,\n                CreationTime: deviation.CreationTime,\n                LocationDescriptor: deviation.LocationDescriptor,\n              }));\n            }\n            return [];  // Om Deviation inte är en array, returnera en tom array\n          }\n        ) : []; // Om det inte är en array, sätt till tom array\n  \n        // Uppdatera state med de extraherade trafikuppdateringarna\n        set({ trafficUpdates: extractedUpdates });\n  \n        console.log(\"Fetched traffic updates:\", extractedUpdates);\n      } catch (error) {\n        console.error(\"Failed to load data:\", error);\n      }\n    };\n  \n    return {\n      trafficUpdates: [],\n      fetchTrafficUpdates,\n    };\n  });\n\n\n  // export const useTrafficStore = create<TrafficState>((set) => {\n  //   const fetchTrafficUpdates = async () => {\n  //     try {\n  //       const { location } = useLocationStore.getState();\n  //       console.log(\"Location in TrafficStore:\", location);\n  \n  //       if (!location) {\n  //         console.error(\"Location is not set. Cannot fetch traffic updates.\");\n  //         return;\n  //       }\n  \n  //       const { latitude, longitude } = location;\n  //       console.log(\"Fetching traffic updates for:\", latitude, longitude);\n  \n  //       const data = await fetchTrafficUpdatesData(latitude, longitude);\n  //       const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n  \n  //       const extractedUpdates: TrafficUpdate[] = situations.flatMap(\n  //         (situation: any) =>\n  //           situation.Deviation.map((deviation: any) => ({\n  //             MessageCode: deviation.MessageCode,\n  //             Message: deviation.Message,\n  //             SeverityText: deviation.SeverityText,\n  //             CreationTime: deviation.CreationTime,\n  //             LocationDescriptor: deviation.LocationDescriptor,\n  //           }))\n  //       );\n  \n  //       set({ trafficUpdates: extractedUpdates });\n  \n  //       console.log(\"Fetched traffic updates:\", extractedUpdates);\n  //     } catch (error) {\n  //       console.error(\"Failed to load data:\", error);\n  //     }\n  //   };\n  \n  //   return {\n  //     trafficUpdates: [],\n  //     fetchTrafficUpdates,\n  //   };\n  // });\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,uBAAuB,QAAQ,wBAAwB;AAChE,SAASC,gBAAgB,QAAQ,oBAAoB;AAkBnD,OAAO,MAAMC,eAAe,GAAGH,MAAM,CAAgBI,GAAG,IAAK;EAC3D,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MAAA,IAAAC,cAAA,EAAAC,qBAAA,EAAAC,sBAAA;MACF;MACA,MAAM;QAAEC;MAAS,CAAC,GAAGP,gBAAgB,CAACQ,QAAQ,CAAC,CAAC;MAChDC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEH,QAAQ,CAAC;MAElD,IAAI,CAACA,QAAQ,EAAE;QACbE,OAAO,CAACE,KAAK,CAAC,oDAAoD,CAAC;QACnE;MACF;MAEA,MAAM;QAAEC,QAAQ;QAAEC;MAAU,CAAC,GAAGN,QAAQ;MACxCE,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEE,QAAQ,EAAEC,SAAS,CAAC;;MAEjE;MACA,MAAMC,IAAI,GAAG,MAAMf,uBAAuB,CAACa,QAAQ,EAAEC,SAAS,CAAC;MAC/DJ,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEI,IAAI,CAAC,CAAC,CAAE;;MAE1C;MACA,MAAMC,UAAU,GAAG,EAAAX,cAAA,GAAAU,IAAI,CAACE,QAAQ,cAAAZ,cAAA,wBAAAC,qBAAA,GAAbD,cAAA,CAAea,MAAM,cAAAZ,qBAAA,wBAAAC,sBAAA,GAArBD,qBAAA,CAAwB,CAAC,CAAC,cAAAC,sBAAA,uBAA1BA,sBAAA,CAA4BY,SAAS,KAAI,EAAE,CAAC,CAAE;;MAEjE;MACA,MAAMC,gBAAiC,GAAGC,KAAK,CAACC,OAAO,CAACN,UAAU,CAAC,GAAGA,UAAU,CAACO,OAAO,CACrFC,SAAc,IAAK;QAClB,IAAIA,SAAS,CAACC,SAAS,IAAIJ,KAAK,CAACC,OAAO,CAACE,SAAS,CAACC,SAAS,CAAC,EAAE;UAC7D,OAAOD,SAAS,CAACC,SAAS,CAACC,GAAG,CAAEC,SAAc,KAAM;YAClDC,WAAW,EAAED,SAAS,CAACC,WAAW;YAClCC,OAAO,EAAEF,SAAS,CAACE,OAAO;YAC1BC,YAAY,EAAEH,SAAS,CAACG,YAAY;YACpCC,YAAY,EAAEJ,SAAS,CAACI,YAAY;YACpCC,kBAAkB,EAAEL,SAAS,CAACK;UAChC,CAAC,CAAC,CAAC;QACL;QACA,OAAO,EAAE,CAAC,CAAE;MACd,CACF,CAAC,GAAG,EAAE,CAAC,CAAC;;MAER;MACA7B,GAAG,CAAC;QAAE8B,cAAc,EAAEb;MAAiB,CAAC,CAAC;MAEzCV,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAES,gBAAgB,CAAC;IAC3D,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,OAAO;IACLqB,cAAc,EAAE,EAAE;IAClB7B;EACF,CAAC;AACH,CAAC,CAAC;;AAGF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}