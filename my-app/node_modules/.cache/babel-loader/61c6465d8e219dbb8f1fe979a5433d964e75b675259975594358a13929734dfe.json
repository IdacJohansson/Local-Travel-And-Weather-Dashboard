{"ast":null,"code":"import { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\nconst fetchTrafficUpdates = async () => {\n  try {\n    const {\n      location\n    } = useLocationStore.getState();\n    if (!location) {\n      console.error(\"Location is not set. Cannot fetch traffic updates.\");\n      return;\n    }\n    const {\n      latitude,\n      longitude\n    } = location;\n    console.log(\"Fetching traffic updates for:\", latitude, longitude);\n    const data = await fetchTrafficUpdatesData(latitude, longitude);\n    console.log(\"Full API response:\", data); // <--- För debug\n\n    // Kontrollera om response innehåller 'trafficUpdates' och om det är en array\n    const situations = data.trafficUpdates || []; // Sätt till tom array om ingen data\n\n    // Använd flatMap för att extrahera uppdateringarna om det är en array\n    const extractedUpdates = Array.isArray(situations) ? situations.flatMap(situation => situation.Deviation.map(deviation => ({\n      MessageCode: deviation.MessageCode,\n      Message: deviation.Message,\n      SeverityText: deviation.SeverityText,\n      CreationTime: deviation.CreationTime,\n      LocationDescriptor: deviation.LocationDescriptor\n    }))) : [];\n    set({\n      trafficUpdates: extractedUpdates\n    });\n    console.log(\"Filtered traffic updates:\", extractedUpdates);\n  } catch (error) {\n    console.error(\"Failed to load data:\", error);\n  }\n};\n\n// export const useTrafficStore = create<TrafficState>((set) => {\n//   const fetchTrafficUpdates = async () => {\n//     try {\n//       const { location } = useLocationStore.getState();\n//       console.log(\"Location in TrafficStore:\", location);\n\n//       if (!location) {\n//         console.error(\"Location is not set. Cannot fetch traffic updates.\");\n//         return;\n//       }\n\n//       const { latitude, longitude } = location;\n//       console.log(\"Fetching traffic updates for:\", latitude, longitude);\n\n//       const data = await fetchTrafficUpdatesData(latitude, longitude);\n//       const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n\n//       const extractedUpdates: TrafficUpdate[] = situations.flatMap(\n//         (situation: any) =>\n//           situation.Deviation.map((deviation: any) => ({\n//             MessageCode: deviation.MessageCode,\n//             Message: deviation.Message,\n//             SeverityText: deviation.SeverityText,\n//             CreationTime: deviation.CreationTime,\n//             LocationDescriptor: deviation.LocationDescriptor,\n//           }))\n//       );\n\n//       set({ trafficUpdates: extractedUpdates });\n\n//       console.log(\"Fetched traffic updates:\", extractedUpdates);\n//     } catch (error) {\n//       console.error(\"Failed to load data:\", error);\n//     }\n//   };\n\n//   return {\n//     trafficUpdates: [],\n//     fetchTrafficUpdates,\n//   };\n// });","map":{"version":3,"names":["fetchTrafficUpdatesData","useLocationStore","fetchTrafficUpdates","location","getState","console","error","latitude","longitude","log","data","situations","trafficUpdates","extractedUpdates","Array","isArray","flatMap","situation","Deviation","map","deviation","MessageCode","Message","SeverityText","CreationTime","LocationDescriptor","set"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/store/useTrafficStore.tsx"],"sourcesContent":["import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\n\nexport interface TrafficUpdate {\n  MessageCode: string;\n  Message: string;\n  SeverityText: string;\n  CreationTime: string;\n  LocationDescriptor: string;\n  Geometry?: {\n    WGS84: string;\n  };\n}\n\nexport interface TrafficState {\n    trafficUpdates: TrafficUpdate[];\n    fetchTrafficUpdates: () => Promise<void>;\n  }\n\n  const fetchTrafficUpdates = async () => {\n    try {\n      const { location } = useLocationStore.getState();\n      if (!location) {\n        console.error(\"Location is not set. Cannot fetch traffic updates.\");\n        return;\n      }\n  \n      const { latitude, longitude } = location;\n      console.log(\"Fetching traffic updates for:\", latitude, longitude);\n  \n      const data = await fetchTrafficUpdatesData(latitude, longitude);\n      console.log(\"Full API response:\", data);  // <--- För debug\n  \n      // Kontrollera om response innehåller 'trafficUpdates' och om det är en array\n      const situations = data.trafficUpdates || [];  // Sätt till tom array om ingen data\n  \n      // Använd flatMap för att extrahera uppdateringarna om det är en array\n      const extractedUpdates: TrafficUpdate[] = Array.isArray(situations) ? situations.flatMap(\n        (situation: any) =>\n          situation.Deviation.map((deviation: any) => ({\n            MessageCode: deviation.MessageCode,\n            Message: deviation.Message,\n            SeverityText: deviation.SeverityText,\n            CreationTime: deviation.CreationTime,\n            LocationDescriptor: deviation.LocationDescriptor,\n          }))\n      ) : [];\n  \n      set({ trafficUpdates: extractedUpdates });\n  \n      console.log(\"Filtered traffic updates:\", extractedUpdates);\n    } catch (error) {\n      console.error(\"Failed to load data:\", error);\n    }\n  };\n\n\n  // export const useTrafficStore = create<TrafficState>((set) => {\n  //   const fetchTrafficUpdates = async () => {\n  //     try {\n  //       const { location } = useLocationStore.getState();\n  //       console.log(\"Location in TrafficStore:\", location);\n  \n  //       if (!location) {\n  //         console.error(\"Location is not set. Cannot fetch traffic updates.\");\n  //         return;\n  //       }\n  \n  //       const { latitude, longitude } = location;\n  //       console.log(\"Fetching traffic updates for:\", latitude, longitude);\n  \n  //       const data = await fetchTrafficUpdatesData(latitude, longitude);\n  //       const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n  \n  //       const extractedUpdates: TrafficUpdate[] = situations.flatMap(\n  //         (situation: any) =>\n  //           situation.Deviation.map((deviation: any) => ({\n  //             MessageCode: deviation.MessageCode,\n  //             Message: deviation.Message,\n  //             SeverityText: deviation.SeverityText,\n  //             CreationTime: deviation.CreationTime,\n  //             LocationDescriptor: deviation.LocationDescriptor,\n  //           }))\n  //       );\n  \n  //       set({ trafficUpdates: extractedUpdates });\n  \n  //       console.log(\"Fetched traffic updates:\", extractedUpdates);\n  //     } catch (error) {\n  //       console.error(\"Failed to load data:\", error);\n  //     }\n  //   };\n  \n  //   return {\n  //     trafficUpdates: [],\n  //     fetchTrafficUpdates,\n  //   };\n  // });\n"],"mappings":"AACA,SAASA,uBAAuB,QAAQ,wBAAwB;AAChE,SAASC,gBAAgB,QAAQ,oBAAoB;AAkBnD,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAM;MAAEC;IAAS,CAAC,GAAGF,gBAAgB,CAACG,QAAQ,CAAC,CAAC;IAChD,IAAI,CAACD,QAAQ,EAAE;MACbE,OAAO,CAACC,KAAK,CAAC,oDAAoD,CAAC;MACnE;IACF;IAEA,MAAM;MAAEC,QAAQ;MAAEC;IAAU,CAAC,GAAGL,QAAQ;IACxCE,OAAO,CAACI,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,EAAEC,SAAS,CAAC;IAEjE,MAAME,IAAI,GAAG,MAAMV,uBAAuB,CAACO,QAAQ,EAAEC,SAAS,CAAC;IAC/DH,OAAO,CAACI,GAAG,CAAC,oBAAoB,EAAEC,IAAI,CAAC,CAAC,CAAE;;IAE1C;IACA,MAAMC,UAAU,GAAGD,IAAI,CAACE,cAAc,IAAI,EAAE,CAAC,CAAE;;IAE/C;IACA,MAAMC,gBAAiC,GAAGC,KAAK,CAACC,OAAO,CAACJ,UAAU,CAAC,GAAGA,UAAU,CAACK,OAAO,CACrFC,SAAc,IACbA,SAAS,CAACC,SAAS,CAACC,GAAG,CAAEC,SAAc,KAAM;MAC3CC,WAAW,EAAED,SAAS,CAACC,WAAW;MAClCC,OAAO,EAAEF,SAAS,CAACE,OAAO;MAC1BC,YAAY,EAAEH,SAAS,CAACG,YAAY;MACpCC,YAAY,EAAEJ,SAAS,CAACI,YAAY;MACpCC,kBAAkB,EAAEL,SAAS,CAACK;IAChC,CAAC,CAAC,CACN,CAAC,GAAG,EAAE;IAENC,GAAG,CAAC;MAAEd,cAAc,EAAEC;IAAiB,CAAC,CAAC;IAEzCR,OAAO,CAACI,GAAG,CAAC,2BAA2B,EAAEI,gBAAgB,CAAC;EAC5D,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC;;AAGD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}