{"ast":null,"code":"var _jsxFileName = \"/Users/supaneepatsa/Desktop/Local-Travel-And-Weather-Dashboard/my-app/src/components/GetGeolocation/Geolocation.tsx\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect } from \"react\";\nimport { useWeatherStore } from \"../Weather/weatherStore\";\nimport { useTrafficStore } from \"../../store/useTrafficStore\";\nimport { useLocationStore } from \"../../store/useLocationStore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeolocationApp = () => {\n  _s();\n  const {\n    fetchWeather\n  } = useWeatherStore();\n  const {\n    location,\n    address,\n    setLocation,\n    setAddress\n  } = useLocationStore();\n  const {\n    fetchTrafficUpdates\n  } = useTrafficStore();\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (location) {\n      fetchTrafficUpdates();\n      fetchWeather(location.latitude, location.longitude);\n    }\n  }, [location, fetchTrafficUpdates, fetchWeather]);\n  const getLocation = async () => {\n    if (address.trim() === \"\") {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(({\n          coords: {\n            latitude,\n            longitude\n          }\n        }) => {\n          setLocation({\n            latitude,\n            longitude\n          });\n          fetchTrafficUpdates();\n          fetchWeather(latitude, longitude);\n        }, () => console.error(\"Unable to retrieve location.\"));\n      } else {\n        console.error(\"Geolocation is not supported.\");\n      }\n    } else {\n      try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);\n        const [location] = await response.json();\n        if (location) {\n          const {\n            lat,\n            lon\n          } = location;\n          setLocation({\n            latitude: parseFloat(lat),\n            longitude: parseFloat(lon)\n          });\n          setAddress(\"\");\n          fetchTrafficUpdates();\n          fetchWeather(lat, lon);\n        } else {\n          console.error(\"Location not found for address:\", address);\n        }\n      } catch (error) {\n        console.error(\"Error fetching location for address:\", error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-200 text-black rounded-2xl p-4 w-[500px] mx-auto shadow-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      placeholder: \"Search for a location...\",\n      value: address,\n      onChange: e => setAddress(e.target.value),\n      className: \"w-full p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getLocation,\n      className: \"mt-2 w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition\",\n      children: \"Get Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4 text-center text-black\",\n      children: location ? `Latitude: ${location.latitude}, Longitude: ${location.longitude}` : \"No location available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(GeolocationApp, \"urExRUaHwe+5W2buc4f04li6xvs=\", false, function () {\n  return [useWeatherStore, useLocationStore, useTrafficStore];\n});\n_c = GeolocationApp;\nexport default GeolocationApp;\nvar _c;\n$RefreshReg$(_c, \"GeolocationApp\");","map":{"version":3,"names":["useRef","useEffect","useWeatherStore","useTrafficStore","useLocationStore","jsxDEV","_jsxDEV","GeolocationApp","_s","fetchWeather","location","address","setLocation","setAddress","fetchTrafficUpdates","inputRef","latitude","longitude","getLocation","trim","navigator","geolocation","getCurrentPosition","coords","console","error","response","fetch","encodeURIComponent","json","lat","lon","parseFloat","className","children","ref","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/supaneepatsa/Desktop/Local-Travel-And-Weather-Dashboard/my-app/src/components/GetGeolocation/Geolocation.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\nimport { useWeatherStore } from \"../Weather/weatherStore\";\nimport { useTrafficStore } from \"../../store/useTrafficStore\";\nimport { useLocationStore } from \"../../store/useLocationStore\";\n\nconst GeolocationApp: React.FC = () => {\n  const { fetchWeather } = useWeatherStore();\n  const { location, address, setLocation, setAddress } = useLocationStore();\n  const { fetchTrafficUpdates } = useTrafficStore();\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (location) {\n      fetchTrafficUpdates();\n      fetchWeather(location.latitude, location.longitude);\n    }\n  }, [location, fetchTrafficUpdates, fetchWeather]);\n\n  const getLocation = async () => {\n    if (address.trim() === \"\") {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          ({ coords: { latitude, longitude } }) => {\n            setLocation({ latitude, longitude });\n            fetchTrafficUpdates();\n            fetchWeather(latitude, longitude);\n          },\n          () => console.error(\"Unable to retrieve location.\")\n        );\n      } else {\n        console.error(\"Geolocation is not supported.\");\n      }\n    } else {\n      try {\n        const response = await fetch(\n          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\n            address\n          )}`\n        );\n        const [location] = await response.json();\n        if (location) {\n          const { lat, lon } = location;\n          setLocation({\n            latitude: parseFloat(lat),\n            longitude: parseFloat(lon),\n          });\n          setAddress(\"\");\n          fetchTrafficUpdates();\n          fetchWeather(lat, lon);\n        } else {\n          console.error(\"Location not found for address:\", address);\n        }\n      } catch (error) {\n        console.error(\"Error fetching location for address:\", error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"bg-gray-200 text-black rounded-2xl p-4 w-[500px] mx-auto shadow-lg\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        placeholder=\"Search for a location...\"\n        value={address}\n        onChange={(e) => setAddress(e.target.value)}\n        className=\"w-full p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      />\n      <button\n        onClick={getLocation}\n        className=\"mt-2 w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 transition\"\n      >\n        Get Location\n      </button>\n      <p className=\"mt-4 text-center text-black\">\n        {location\n          ? `Latitude: ${location.latitude}, Longitude: ${location.longitude}`\n          : \"No location available\"}\n      </p>\n    </div>\n      \n  );\n};\nexport default GeolocationApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}