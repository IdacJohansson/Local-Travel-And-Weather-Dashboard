{"ast":null,"code":"import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\nexport const useTrafficStore = create((set, get) => {\n  const fetchTrafficUpdates = async () => {\n    try {\n      var _data$RESPONSE$RESULT;\n      const {\n        location\n      } = useLocationStore.getState();\n      // console.log(\"Location in TrafficStore:\", location);\n\n      if (!location) {\n        console.error(\"Location is not set. Cannot fetch traffic updates.\");\n        return;\n      }\n      const {\n        latitude,\n        longitude\n      } = location;\n      // console.log(\"Fetching traffic updates for:\", latitude, longitude);\n\n      const data = await fetchTrafficUpdatesData(latitude, longitude);\n      const situations = ((_data$RESPONSE$RESULT = data.RESPONSE.RESULT[0]) === null || _data$RESPONSE$RESULT === void 0 ? void 0 : _data$RESPONSE$RESULT.Situation) || [];\n      const extractedUpdates = situations.flatMap(situation => situation.Deviation.map(deviation => ({\n        MessageCode: deviation.MessageCode,\n        Message: deviation.Message,\n        SeverityText: deviation.SeverityText,\n        CreationTime: deviation.CreationTime,\n        LocationDescriptor: deviation.LocationDescriptor\n      }))).slice(0, 3);\n      set({\n        trafficUpdates: extractedUpdates\n      });\n\n      // console.log(\"Fetched traffic updates:\", extractedUpdates);\n    } catch (error) {\n      console.error(\"Failed to load data:\", error);\n    }\n  };\n  const getSeverityColor = severity => {\n    switch (severity) {\n      case \"Stor p책verkan\":\n        return \"text-red-600\";\n      case \"Liten p책verkan\":\n        return \"text-yellow-500\";\n      default:\n        return \"text-gray-500\";\n    }\n  };\n  const getMessageCode = messageCode => {\n    return get().trafficUpdates.filter(update => update.MessageCode === messageCode).length;\n  };\n  return {\n    trafficUpdates: [],\n    fetchTrafficUpdates,\n    getSeverityColor,\n    getMessageCode\n  };\n});","map":{"version":3,"names":["create","fetchTrafficUpdatesData","useLocationStore","useTrafficStore","set","get","fetchTrafficUpdates","_data$RESPONSE$RESULT","location","getState","console","error","latitude","longitude","data","situations","RESPONSE","RESULT","Situation","extractedUpdates","flatMap","situation","Deviation","map","deviation","MessageCode","Message","SeverityText","CreationTime","LocationDescriptor","slice","trafficUpdates","getSeverityColor","severity","getMessageCode","messageCode","filter","update","length"],"sources":["/Users/supaneepatsa/Desktop/Local-Travel-And-Weather-Dashboard/my-app/src/store/useTrafficStore.tsx"],"sourcesContent":["import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\n\nexport interface TrafficUpdate {\n  MessageCode: string;\n  Message: string;\n  SeverityText: string;\n  CreationTime: string;\n  LocationDescriptor: string;\n}\n\nexport interface TrafficState {\n  trafficUpdates: TrafficUpdate[];\n  fetchTrafficUpdates: () => Promise<void>;\n  getMessageCode: (messageCode: string) => number;\n  getSeverityColor: (severity: string) => string;\n}\n\nexport const useTrafficStore = create<TrafficState>((set, get) => {\n  const fetchTrafficUpdates = async () => {\n    try {\n      const { location } = useLocationStore.getState();\n      // console.log(\"Location in TrafficStore:\", location);\n\n      if (!location) {\n        console.error(\"Location is not set. Cannot fetch traffic updates.\");\n        return;\n      }\n\n      const { latitude, longitude } = location;\n      // console.log(\"Fetching traffic updates for:\", latitude, longitude);\n\n      const data = await fetchTrafficUpdatesData(latitude, longitude);\n      const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n\n      const extractedUpdates: TrafficUpdate[] = situations\n        .flatMap((situation: any) =>\n          situation.Deviation.map((deviation: any) => ({\n            MessageCode: deviation.MessageCode,\n            Message: deviation.Message,\n            SeverityText: deviation.SeverityText,\n            CreationTime: deviation.CreationTime,\n            LocationDescriptor: deviation.LocationDescriptor,\n          }))\n        )\n        .slice(0, 3);\n\n      set({ trafficUpdates: extractedUpdates });\n\n      // console.log(\"Fetched traffic updates:\", extractedUpdates);\n    } catch (error) {\n      console.error(\"Failed to load data:\", error);\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"Stor p책verkan\":\n        return \"text-red-600\";\n      case \"Liten p책verkan\":\n        return \"text-yellow-500\";\n      default:\n        return \"text-gray-500\";\n    }\n  };\n\n  const getMessageCode = (messageCode: string) => {\n    return get().trafficUpdates.filter(\n      (update) => update.MessageCode === messageCode\n    ).length;\n  };\n\n  return {\n    trafficUpdates: [],\n    fetchTrafficUpdates,\n    getSeverityColor,\n    getMessageCode,\n  };\n});"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,uBAAuB,QAAQ,wBAAwB;AAChE,SAASC,gBAAgB,QAAQ,oBAAoB;AAiBrD,OAAO,MAAMC,eAAe,GAAGH,MAAM,CAAe,CAACI,GAAG,EAAEC,GAAG,KAAK;EAChE,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MAAA,IAAAC,qBAAA;MACF,MAAM;QAAEC;MAAS,CAAC,GAAGN,gBAAgB,CAACO,QAAQ,CAAC,CAAC;MAChD;;MAEA,IAAI,CAACD,QAAQ,EAAE;QACbE,OAAO,CAACC,KAAK,CAAC,oDAAoD,CAAC;QACnE;MACF;MAEA,MAAM;QAAEC,QAAQ;QAAEC;MAAU,CAAC,GAAGL,QAAQ;MACxC;;MAEA,MAAMM,IAAI,GAAG,MAAMb,uBAAuB,CAACW,QAAQ,EAAEC,SAAS,CAAC;MAC/D,MAAME,UAAU,GAAG,EAAAR,qBAAA,GAAAO,IAAI,CAACE,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,cAAAV,qBAAA,uBAAvBA,qBAAA,CAAyBW,SAAS,KAAI,EAAE;MAE3D,MAAMC,gBAAiC,GAAGJ,UAAU,CACjDK,OAAO,CAAEC,SAAc,IACtBA,SAAS,CAACC,SAAS,CAACC,GAAG,CAAEC,SAAc,KAAM;QAC3CC,WAAW,EAAED,SAAS,CAACC,WAAW;QAClCC,OAAO,EAAEF,SAAS,CAACE,OAAO;QAC1BC,YAAY,EAAEH,SAAS,CAACG,YAAY;QACpCC,YAAY,EAAEJ,SAAS,CAACI,YAAY;QACpCC,kBAAkB,EAAEL,SAAS,CAACK;MAChC,CAAC,CAAC,CACJ,CAAC,CACAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MAEd1B,GAAG,CAAC;QAAE2B,cAAc,EAAEZ;MAAiB,CAAC,CAAC;;MAEzC;IACF,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAMqB,gBAAgB,GAAIC,QAAgB,IAAK;IAC7C,QAAQA,QAAQ;MACd,KAAK,eAAe;QAClB,OAAO,cAAc;MACvB,KAAK,gBAAgB;QACnB,OAAO,iBAAiB;MAC1B;QACE,OAAO,eAAe;IAC1B;EACF,CAAC;EAED,MAAMC,cAAc,GAAIC,WAAmB,IAAK;IAC9C,OAAO9B,GAAG,CAAC,CAAC,CAAC0B,cAAc,CAACK,MAAM,CAC/BC,MAAM,IAAKA,MAAM,CAACZ,WAAW,KAAKU,WACrC,CAAC,CAACG,MAAM;EACV,CAAC;EAED,OAAO;IACLP,cAAc,EAAE,EAAE;IAClBzB,mBAAmB;IACnB0B,gBAAgB;IAChBE;EACF,CAAC;AACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}