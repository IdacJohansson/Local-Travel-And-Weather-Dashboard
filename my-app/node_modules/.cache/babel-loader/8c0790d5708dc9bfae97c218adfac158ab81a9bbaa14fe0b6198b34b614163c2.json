{"ast":null,"code":"import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useInputStore\";\nexport const useTrafficStore = create(set => ({\n  trafficUpdates: [],\n  fetchTrafficUpdates: async () => {\n    try {\n      var _data$RESPONSE$RESULT;\n      const {\n        location\n      } = useLocationStore.getState(); // Hämta platsdata\n      const match = location.match(/Latitude:\\s*([-0-9.]+),\\s*Longitude:\\s*([-0-9.]+)/);\n      if (!match) {\n        console.error(\"Invalid location format:\", location);\n        return;\n      }\n      const latitude = parseFloat(match[1]);\n      const longitude = parseFloat(match[2]);\n      const data = await fetchTrafficUpdatesData(latitude, longitude);\n      const situations = ((_data$RESPONSE$RESULT = data.RESPONSE.RESULT[0]) === null || _data$RESPONSE$RESULT === void 0 ? void 0 : _data$RESPONSE$RESULT.Situation) || [];\n      const extractNestedData = situations.flatMap(situation => situation.Deviation.map(deviation => ({\n        MessageCode: deviation.MessageCode,\n        Message: deviation.Message,\n        SeverityText: deviation.SeverityText,\n        CreationTime: deviation.CreationTime,\n        LocationDescriptor: deviation.LocationDescriptor,\n        IconId: deviation.roadAccident\n      })));\n      set({\n        trafficUpdates: extractNestedData\n      });\n      console.log(extractNestedData);\n    } catch (error) {\n      console.error(\"Failed to load data:\", error);\n    }\n  }\n}));","map":{"version":3,"names":["create","fetchTrafficUpdatesData","useLocationStore","useTrafficStore","set","trafficUpdates","fetchTrafficUpdates","_data$RESPONSE$RESULT","location","getState","match","console","error","latitude","parseFloat","longitude","data","situations","RESPONSE","RESULT","Situation","extractNestedData","flatMap","situation","Deviation","map","deviation","MessageCode","Message","SeverityText","CreationTime","LocationDescriptor","IconId","roadAccident","log"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/store/useTrafficStore.tsx"],"sourcesContent":["import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useInputStore\";\nimport { TrafficState, TrafficUpdateInterface } from \"../types/trafficTypes\";\n\nexport const useTrafficStore = create<TrafficState>((set) => ({\n  trafficUpdates: [],\n  fetchTrafficUpdates: async () => {\n    try {\n      const { location } = useLocationStore.getState(); // Hämta platsdata\n      const match = location.match(/Latitude:\\s*([-0-9.]+),\\s*Longitude:\\s*([-0-9.]+)/);\n      if (!match) {\n        console.error(\"Invalid location format:\", location);\n        return;\n      }\n      const latitude = parseFloat(match[1]);\n      const longitude = parseFloat(match[2]);\n\n      const data = await fetchTrafficUpdatesData(latitude, longitude);\n      const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n\n      const extractNestedData: TrafficUpdateInterface[] = situations.flatMap(\n        (situation: any) =>\n          situation.Deviation.map((deviation: any) => ({\n            MessageCode: deviation.MessageCode,\n            Message: deviation.Message,\n            SeverityText: deviation.SeverityText,\n            CreationTime: deviation.CreationTime,\n            LocationDescriptor: deviation.LocationDescriptor,\n            IconId: deviation.roadAccident\n          }))\n      );\n\n      set({ trafficUpdates: extractNestedData });\n\n      console.log(extractNestedData);\n    } catch (error) {\n      console.error(\"Failed to load data:\", error);\n    }\n  },\n}));\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,uBAAuB,QAAQ,wBAAwB;AAChE,SAASC,gBAAgB,QAAQ,iBAAiB;AAGlD,OAAO,MAAMC,eAAe,GAAGH,MAAM,CAAgBI,GAAG,KAAM;EAC5DC,cAAc,EAAE,EAAE;EAClBC,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAC/B,IAAI;MAAA,IAAAC,qBAAA;MACF,MAAM;QAAEC;MAAS,CAAC,GAAGN,gBAAgB,CAACO,QAAQ,CAAC,CAAC,CAAC,CAAC;MAClD,MAAMC,KAAK,GAAGF,QAAQ,CAACE,KAAK,CAAC,mDAAmD,CAAC;MACjF,IAAI,CAACA,KAAK,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEJ,QAAQ,CAAC;QACnD;MACF;MACA,MAAMK,QAAQ,GAAGC,UAAU,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;MACrC,MAAMK,SAAS,GAAGD,UAAU,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;MAEtC,MAAMM,IAAI,GAAG,MAAMf,uBAAuB,CAACY,QAAQ,EAAEE,SAAS,CAAC;MAC/D,MAAME,UAAU,GAAG,EAAAV,qBAAA,GAAAS,IAAI,CAACE,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,cAAAZ,qBAAA,uBAAvBA,qBAAA,CAAyBa,SAAS,KAAI,EAAE;MAE3D,MAAMC,iBAA2C,GAAGJ,UAAU,CAACK,OAAO,CACnEC,SAAc,IACbA,SAAS,CAACC,SAAS,CAACC,GAAG,CAAEC,SAAc,KAAM;QAC3CC,WAAW,EAAED,SAAS,CAACC,WAAW;QAClCC,OAAO,EAAEF,SAAS,CAACE,OAAO;QAC1BC,YAAY,EAAEH,SAAS,CAACG,YAAY;QACpCC,YAAY,EAAEJ,SAAS,CAACI,YAAY;QACpCC,kBAAkB,EAAEL,SAAS,CAACK,kBAAkB;QAChDC,MAAM,EAAEN,SAAS,CAACO;MACpB,CAAC,CAAC,CACN,CAAC;MAED7B,GAAG,CAAC;QAAEC,cAAc,EAAEgB;MAAkB,CAAC,CAAC;MAE1CV,OAAO,CAACuB,GAAG,CAACb,iBAAiB,CAAC;IAChC,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}