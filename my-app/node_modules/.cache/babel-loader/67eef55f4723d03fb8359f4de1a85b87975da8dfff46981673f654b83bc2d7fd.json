{"ast":null,"code":"var _jsxFileName = \"/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/components/SearchBox/SearchBox.tsx\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect } from \"react\";\nimport { useLocationStore } from \"../../store/useInputStore\";\nimport { useTrafficStore } from \"../../store/useTrafficStore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBox = () => {\n  _s();\n  const {\n    location,\n    address,\n    setLocation,\n    setAddress\n  } = useLocationStore();\n  const {\n    fetchTrafficUpdates\n  } = useTrafficStore();\n  const inputRef = useRef(null);\n  useEffect(() => {\n    console.log(\"Location updated:\", location);\n    if (location) {\n      fetchTrafficUpdates();\n    }\n  }, [location]);\n  const getLocation = async () => {\n    if (address.trim() === \"\") {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          setLocation({\n            latitude,\n            longitude\n          });\n        }, () => {\n          console.error(\"Unable to retrieve location.\");\n        });\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n        setLocation({\n          latitude: 59.3293,\n          longitude: 18.0686\n        });\n      }\n    } else {\n      try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);\n        const data = await response.json();\n        if (data.length > 0) {\n          const {\n            lat,\n            lon\n          } = data[0];\n          setLocation({\n            latitude: parseFloat(lat),\n            longitude: parseFloat(lon)\n          });\n          setAddress(\"\");\n        } else {\n          console.error(\"Location not found.\");\n        }\n      } catch {\n        console.error(\"Error fetching location.\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      placeholder: \"Search for a location...\",\n      value: address,\n      onChange: e => setAddress(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getLocation,\n      children: \"Get Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: location ? `Latitude: ${location.latitude}, Longitude: ${location.longitude}` : \"No location available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBox, \"Sg0BO9Iq3J/qjGWf1Aykpq5s/Fw=\", false, function () {\n  return [useLocationStore, useTrafficStore];\n});\n_c = SearchBox;\nexport default SearchBox;\n\n//   const getLocation = async () => {\n//     if (address.trim() === \"\") {\n//       if (navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(\n//           (position) => {\n//             const latitude = position.coords.latitude;\n//             const longitude = position.coords.longitude;\n//             setLocation(`Latitude: ${latitude}, Longitude: ${longitude}`);\n//           },\n//           () => {\n//             setLocation(\"Unable to retrieve location.\");\n//           }\n//         );\n//       } else {\n//         setLocation(\"Geolocation is not supported by this browser.\");\n//       }\n//     } else {\n//       try {\n//         const response = await fetch(\n//           `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`\n//         );\n//         const data = await response.json();\n//         if (data.length > 0) {\n//           const { lat, lon } = data[0];\n//           setLocation(`Latitude: ${lat}, Longitude: ${lon}`);\n//           setAddress(\"\");\n//         } else {\n//           setLocation(\"Location not found.\");\n//         }\n//       } catch {\n//         setLocation(\"Error fetching location.\");\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <input ref={inputRef} type=\"text\" placeholder=\"Search for a location...\" value={address} onChange={(e) => setAddress(e.target.value)} />\n//       <button onClick={getLocation}>Get Location</button>\n//       <p>{location}</p>\n//     </div>\n//   );\n// };\nvar _c;\n$RefreshReg$(_c, \"SearchBox\");","map":{"version":3,"names":["useRef","useEffect","useLocationStore","useTrafficStore","jsxDEV","_jsxDEV","SearchBox","_s","location","address","setLocation","setAddress","fetchTrafficUpdates","inputRef","console","log","getLocation","trim","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","error","response","fetch","encodeURIComponent","data","json","length","lat","lon","parseFloat","children","ref","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/components/SearchBox/SearchBox.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\nimport { useLocationStore } from \"../../store/useInputStore\";\r\nimport { useTrafficStore } from \"../../store/useTrafficStore\";\r\n\r\nconst SearchBox = () => {\r\n  const { location, address, setLocation, setAddress } = useLocationStore();\r\n  const { fetchTrafficUpdates } = useTrafficStore();\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Location updated:\", location);\r\n    if (location) {\r\n      fetchTrafficUpdates();\r\n    }\r\n  }, [location]);\r\n\r\n  const getLocation = async () => {\r\n    if (address.trim() === \"\") {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const latitude = position.coords.latitude;\r\n            const longitude = position.coords.longitude;\r\n            setLocation({ latitude, longitude });\r\n          },\r\n          () => {\r\n            console.error(\"Unable to retrieve location.\");\r\n          }\r\n        );\r\n      } else {\r\n        console.error(\"Geolocation is not supported by this browser.\");\r\n        setLocation({ latitude: 59.3293, longitude: 18.0686 });\r\n      }\r\n    } else {\r\n      try {\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n            address\r\n          )}`\r\n        );\r\n        const data = await response.json();\r\n        if (data.length > 0) {\r\n          const { lat, lon } = data[0];\r\n          setLocation({\r\n            latitude: parseFloat(lat),\r\n            longitude: parseFloat(lon),\r\n          });\r\n          setAddress(\"\");\r\n        } else {\r\n          console.error(\"Location not found.\");\r\n        }\r\n      } catch {\r\n        console.error(\"Error fetching location.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        placeholder=\"Search for a location...\"\r\n        value={address}\r\n        onChange={(e) => setAddress(e.target.value)}\r\n      />\r\n      <button onClick={getLocation}>Get Location</button>\r\n      <p>\r\n        {location\r\n          ? `Latitude: ${location.latitude}, Longitude: ${location.longitude}`\r\n          : \"No location available\"}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n\r\n\r\n\r\n\r\n\r\n  //   const getLocation = async () => {\r\n  //     if (address.trim() === \"\") {\r\n  //       if (navigator.geolocation) {\r\n  //         navigator.geolocation.getCurrentPosition(\r\n  //           (position) => {\r\n  //             const latitude = position.coords.latitude;\r\n  //             const longitude = position.coords.longitude;\r\n  //             setLocation(`Latitude: ${latitude}, Longitude: ${longitude}`);\r\n  //           },\r\n  //           () => {\r\n  //             setLocation(\"Unable to retrieve location.\");\r\n  //           }\r\n  //         );\r\n  //       } else {\r\n  //         setLocation(\"Geolocation is not supported by this browser.\");\r\n  //       }\r\n  //     } else {\r\n  //       try {\r\n  //         const response = await fetch(\r\n  //           `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`\r\n  //         );\r\n  //         const data = await response.json();\r\n  //         if (data.length > 0) {\r\n  //           const { lat, lon } = data[0];\r\n  //           setLocation(`Latitude: ${lat}, Longitude: ${lon}`);\r\n  //           setAddress(\"\");\r\n  //         } else {\r\n  //           setLocation(\"Location not found.\");\r\n  //         }\r\n  //       } catch {\r\n  //         setLocation(\"Error fetching location.\");\r\n  //       }\r\n  //     }\r\n  //   };\r\n\r\n  //   return (\r\n  //     <div>\r\n  //       <input ref={inputRef} type=\"text\" placeholder=\"Search for a location...\" value={address} onChange={(e) => setAddress(e.target.value)} />\r\n  //       <button onClick={getLocation}>Get Location</button>\r\n  //       <p>{location}</p>\r\n  //     </div>\r\n  //   );\r\n  // };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}