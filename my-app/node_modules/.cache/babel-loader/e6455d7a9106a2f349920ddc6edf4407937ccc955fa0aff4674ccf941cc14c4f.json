{"ast":null,"code":"var _jsxFileName = \"/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/components/SearchBox/SearchBox.tsx\",\n  _s = $RefreshSig$();\n// transportDepartures.tsx\nimport { useRef, useEffect } from \"react\";\nimport { useLocationStore } from \"../../store/useInputStore\";\nimport { useTrafficStore } from \"../../store/useTrafficStore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBox = () => {\n  _s();\n  const {\n    location,\n    address,\n    setLocation,\n    setAddress\n  } = useLocationStore();\n  const {\n    fetchTrafficUpdates\n  } = useTrafficStore();\n  const inputRef = useRef(null);\n  useEffect(() => {\n    if (location.includes(\"Latitude\")) {\n      fetchTrafficUpdatesData(); // Hämta trafikuppdateringar när platsen ändras\n    }\n  }, [location]);\n  const getLocation = async () => {\n    if (address.trim() === \"\") {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          setLocation(`Latitude: ${latitude}, Longitude: ${longitude}`);\n        }, () => {\n          setLocation(\"Unable to retrieve location.\");\n        });\n      } else {\n        setLocation(\"Geolocation is not supported by this browser.\");\n      }\n    } else {\n      try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);\n        const data = await response.json();\n        if (data.length > 0) {\n          const {\n            lat,\n            lon\n          } = data[0];\n          setLocation(`Latitude: ${lat}, Longitude: ${lon}`);\n          setAddress(\"\");\n        } else {\n          setLocation(\"Location not found.\");\n        }\n      } catch {\n        setLocation(\"Error fetching location.\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      placeholder: \"Search for a location...\",\n      value: address,\n      onChange: e => setAddress(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getLocation,\n      children: \"Get Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: location\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBox, \"Sg0BO9Iq3J/qjGWf1Aykpq5s/Fw=\", false, function () {\n  return [useLocationStore, useTrafficStore];\n});\n_c = SearchBox;\nexport default SearchBox;\nvar _c;\n$RefreshReg$(_c, \"SearchBox\");","map":{"version":3,"names":["useRef","useEffect","useLocationStore","useTrafficStore","jsxDEV","_jsxDEV","SearchBox","_s","location","address","setLocation","setAddress","fetchTrafficUpdates","inputRef","includes","fetchTrafficUpdatesData","getLocation","trim","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","response","fetch","encodeURIComponent","data","json","length","lat","lon","children","ref","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/components/SearchBox/SearchBox.tsx"],"sourcesContent":["// transportDepartures.tsx\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { useLocationStore } from \"../../store/useInputStore\";\r\nimport { useTrafficStore } from \"../../store/useTrafficStore\";\r\n\r\nconst SearchBox = () => {\r\n  const { location, address, setLocation, setAddress } = useLocationStore();\r\n  const { fetchTrafficUpdates } = useTrafficStore();\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (location.includes(\"Latitude\")) {\r\n      fetchTrafficUpdatesData(); // Hämta trafikuppdateringar när platsen ändras\r\n    }\r\n  }, [location]);\r\n\r\n  const getLocation = async () => {\r\n    if (address.trim() === \"\") {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const latitude = position.coords.latitude;\r\n            const longitude = position.coords.longitude;\r\n            setLocation(`Latitude: ${latitude}, Longitude: ${longitude}`);\r\n          },\r\n          () => {\r\n            setLocation(\"Unable to retrieve location.\");\r\n          }\r\n        );\r\n      } else {\r\n        setLocation(\"Geolocation is not supported by this browser.\");\r\n      }\r\n    } else {\r\n      try {\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`\r\n        );\r\n        const data = await response.json();\r\n        if (data.length > 0) {\r\n          const { lat, lon } = data[0];\r\n          setLocation(`Latitude: ${lat}, Longitude: ${lon}`);\r\n          setAddress(\"\");\r\n        } else {\r\n          setLocation(\"Location not found.\");\r\n        }\r\n      } catch {\r\n        setLocation(\"Error fetching location.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input ref={inputRef} type=\"text\" placeholder=\"Search for a location...\" value={address} onChange={(e) => setAddress(e.target.value)} />\r\n      <button onClick={getLocation}>Get Location</button>\r\n      <p>{location}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}