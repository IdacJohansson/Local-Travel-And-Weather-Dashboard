{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/store/useTrafficStore.tsx"],"sourcesContent":["import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useInputStore\";\nimport { TrafficState, TrafficUpdateInterface } from \"../types/trafficTypes\";\n\n// export const useTrafficStore = create<TrafficState>((set) => ({\n//   trafficUpdates: [],\n//   fetchTrafficUpdates: async () => {\n//     try {\n//       const { location } = useLocationStore.getState(); \n//       console.log(\"Location frÃ¥n useTrafficStore:\", location);\n\n//       const match = location.match(/Latitude:\\s*([-+]?[0-9]*\\.?[0-9]+),\\s*Longitude:\\s*([-+]?[0-9]*\\.?[0-9]+)/);\n//       if (!match) {\n//         console.error(\"Invalid location format:\", location);\n//         return;\n//       }\n//       const latitude = parseFloat(match[1]);\n//       const longitude = parseFloat(match[2]);\n\n//       const data = await fetchTrafficUpdatesData(latitude, longitude);\n//       const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n\n//       const extractNestedData: TrafficUpdateInterface[] = situations.flatMap(\n//         (situation: any) =>\n//           situation.Deviation.map((deviation: any) => ({\n//             MessageCode: deviation.MessageCode,\n//             Message: deviation.Message,\n//             SeverityText: deviation.SeverityText,\n//             CreationTime: deviation.CreationTime,\n//             LocationDescriptor: deviation.LocationDescriptor,\n//             IconId: deviation.roadAccident\n//           }))\n//       );\n\n//       set({ trafficUpdates: extractNestedData });\n\n//       console.log(extractNestedData);\n//     } catch (error) {\n//       console.error(\"Failed to load data:\", error);\n//     }\n//   },\n// }));\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}