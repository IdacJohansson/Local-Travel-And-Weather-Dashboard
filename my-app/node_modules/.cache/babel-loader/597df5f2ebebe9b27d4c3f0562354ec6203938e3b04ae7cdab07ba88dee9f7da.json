{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useEffect } from \"react\";\nimport { useLocationStore } from \"../../store/useInputStore\";\nimport { useTrafficStore } from \"../../store/useTrafficStore\";\nconst SearchBox = () => {\n  _s();\n  const {\n    location,\n    address,\n    setLocation,\n    setAddress\n  } = useLocationStore();\n  const {\n    fetchTrafficUpdates\n  } = useTrafficStore();\n  const inputRef = useRef(null);\n  useEffect(() => {\n    {\n      fetchTrafficUpdates();\n    }\n  }, [location]);\n\n  //   const getLocation = async () => {\n  //     if (address.trim() === \"\") {\n  //       if (navigator.geolocation) {\n  //         navigator.geolocation.getCurrentPosition(\n  //           (position) => {\n  //             const latitude = position.coords.latitude;\n  //             const longitude = position.coords.longitude;\n  //             setLocation(`Latitude: ${latitude}, Longitude: ${longitude}`);\n  //           },\n  //           () => {\n  //             setLocation(\"Unable to retrieve location.\");\n  //           }\n  //         );\n  //       } else {\n  //         setLocation(\"Geolocation is not supported by this browser.\");\n  //       }\n  //     } else {\n  //       try {\n  //         const response = await fetch(\n  //           `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`\n  //         );\n  //         const data = await response.json();\n  //         if (data.length > 0) {\n  //           const { lat, lon } = data[0];\n  //           setLocation(`Latitude: ${lat}, Longitude: ${lon}`);\n  //           setAddress(\"\");\n  //         } else {\n  //           setLocation(\"Location not found.\");\n  //         }\n  //       } catch {\n  //         setLocation(\"Error fetching location.\");\n  //       }\n  //     }\n  //   };\n\n  //   return (\n  //     <div>\n  //       <input ref={inputRef} type=\"text\" placeholder=\"Search for a location...\" value={address} onChange={(e) => setAddress(e.target.value)} />\n  //       <button onClick={getLocation}>Get Location</button>\n  //       <p>{location}</p>\n  //     </div>\n  //   );\n  // };\n\n  const getLocation = async () => {\n    if (address.trim() === \"\") {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const latitude = position.coords.latitude;\n          const longitude = position.coords.longitude;\n          setLocation({\n            latitude,\n            longitude\n          });\n        }, () => {\n          console.error(\"Unable to retrieve location.\");\n        });\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n      }\n    } else {\n      try {\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`);\n        const data = await response.json();\n        if (data.length > 0) {\n          const {\n            lat,\n            lon\n          } = data[0];\n          setLocation({\n            latitude: parseFloat(lat),\n            longitude: parseFloat(lon)\n          });\n          setAddress(\"\");\n        } else {\n          console.error(\"Location not found.\");\n        }\n      } catch {\n        console.error(\"Error fetching location.\");\n      }\n    }\n  };\n  //   return (\n  //     <div>\n  //       <input ref={inputRef} type=\"text\" placeholder=\"Search for a location...\" value={address} onChange={(e) => setAddress(e.target.value)} />\n  //       <button onClick={getLocation}>Get Location</button>\n  //       <p>{location}</p>\n  //     </div>\n  //   );\n};\n_s(SearchBox, \"Sg0BO9Iq3J/qjGWf1Aykpq5s/Fw=\", false, function () {\n  return [useLocationStore, useTrafficStore];\n});\n_c = SearchBox;\nexport default SearchBox;\nvar _c;\n$RefreshReg$(_c, \"SearchBox\");","map":{"version":3,"names":["useRef","useEffect","useLocationStore","useTrafficStore","SearchBox","_s","location","address","setLocation","setAddress","fetchTrafficUpdates","inputRef","getLocation","trim","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","console","error","response","fetch","encodeURIComponent","data","json","length","lat","lon","parseFloat","_c","$RefreshReg$"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/components/SearchBox/SearchBox.tsx"],"sourcesContent":["import { useState, useRef, useEffect } from \"react\";\r\nimport { useLocationStore } from \"../../store/useInputStore\";\r\nimport { useTrafficStore } from \"../../store/useTrafficStore\";\r\n\r\nconst SearchBox = () => {\r\n  const { location, address, setLocation, setAddress } = useLocationStore();\r\n  const { fetchTrafficUpdates } = useTrafficStore();\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    {\r\n      fetchTrafficUpdates();\r\n    }\r\n  }, [location]);\r\n\r\n  //   const getLocation = async () => {\r\n  //     if (address.trim() === \"\") {\r\n  //       if (navigator.geolocation) {\r\n  //         navigator.geolocation.getCurrentPosition(\r\n  //           (position) => {\r\n  //             const latitude = position.coords.latitude;\r\n  //             const longitude = position.coords.longitude;\r\n  //             setLocation(`Latitude: ${latitude}, Longitude: ${longitude}`);\r\n  //           },\r\n  //           () => {\r\n  //             setLocation(\"Unable to retrieve location.\");\r\n  //           }\r\n  //         );\r\n  //       } else {\r\n  //         setLocation(\"Geolocation is not supported by this browser.\");\r\n  //       }\r\n  //     } else {\r\n  //       try {\r\n  //         const response = await fetch(\r\n  //           `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`\r\n  //         );\r\n  //         const data = await response.json();\r\n  //         if (data.length > 0) {\r\n  //           const { lat, lon } = data[0];\r\n  //           setLocation(`Latitude: ${lat}, Longitude: ${lon}`);\r\n  //           setAddress(\"\");\r\n  //         } else {\r\n  //           setLocation(\"Location not found.\");\r\n  //         }\r\n  //       } catch {\r\n  //         setLocation(\"Error fetching location.\");\r\n  //       }\r\n  //     }\r\n  //   };\r\n\r\n  //   return (\r\n  //     <div>\r\n  //       <input ref={inputRef} type=\"text\" placeholder=\"Search for a location...\" value={address} onChange={(e) => setAddress(e.target.value)} />\r\n  //       <button onClick={getLocation}>Get Location</button>\r\n  //       <p>{location}</p>\r\n  //     </div>\r\n  //   );\r\n  // };\r\n\r\n  const getLocation = async () => {\r\n    if (address.trim() === \"\") {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(\r\n          (position) => {\r\n            const latitude = position.coords.latitude;\r\n            const longitude = position.coords.longitude;\r\n            setLocation({ latitude, longitude });\r\n          },\r\n          () => {\r\n            console.error(\"Unable to retrieve location.\");\r\n          }\r\n        );\r\n      } else {\r\n        console.error(\"Geolocation is not supported by this browser.\");\r\n      }\r\n    } else {\r\n      try {\r\n        const response = await fetch(\r\n          `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n            address\r\n          )}`\r\n        );\r\n        const data = await response.json();\r\n        if (data.length > 0) {\r\n          const { lat, lon } = data[0];\r\n          setLocation({\r\n            latitude: parseFloat(lat),\r\n            longitude: parseFloat(lon),\r\n          });\r\n          setAddress(\"\");\r\n        } else {\r\n          console.error(\"Location not found.\");\r\n        }\r\n      } catch {\r\n        console.error(\"Error fetching location.\");\r\n      }\r\n    }\r\n  };\r\n   //   return (\r\n  //     <div>\r\n  //       <input ref={inputRef} type=\"text\" placeholder=\"Search for a location...\" value={address} onChange={(e) => setAddress(e.target.value)} />\r\n  //       <button onClick={getLocation}>Get Location</button>\r\n  //       <p>{location}</p>\r\n  //     </div>\r\n  //   );\r\n};\r\n\r\nexport default SearchBox;\r\n"],"mappings":";AAAA,SAAmBA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACnD,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,eAAe,QAAQ,6BAA6B;AAE7D,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,WAAW;IAAEC;EAAW,CAAC,GAAGP,gBAAgB,CAAC,CAAC;EACzE,MAAM;IAAEQ;EAAoB,CAAC,GAAGP,eAAe,CAAC,CAAC;EACjD,MAAMQ,QAAQ,GAAGX,MAAM,CAAmB,IAAI,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACd;MACES,mBAAmB,CAAC,CAAC;IACvB;EACF,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;;EAEd;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMM,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAIL,OAAO,CAACM,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACzB,IAAIC,SAAS,CAACC,WAAW,EAAE;QACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;UACZ,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,MAAM,CAACD,QAAQ;UACzC,MAAME,SAAS,GAAGH,QAAQ,CAACE,MAAM,CAACC,SAAS;UAC3CZ,WAAW,CAAC;YAAEU,QAAQ;YAAEE;UAAU,CAAC,CAAC;QACtC,CAAC,EACD,MAAM;UACJC,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC;QAC/C,CACF,CAAC;MACH,CAAC,MAAM;QACLD,OAAO,CAACC,KAAK,CAAC,+CAA+C,CAAC;MAChE;IACF,CAAC,MAAM;MACL,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,4DAA4DC,kBAAkB,CAC5ElB,OACF,CAAC,EACH,CAAC;QACD,MAAMmB,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClC,IAAID,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;UACnB,MAAM;YAAEC,GAAG;YAAEC;UAAI,CAAC,GAAGJ,IAAI,CAAC,CAAC,CAAC;UAC5BlB,WAAW,CAAC;YACVU,QAAQ,EAAEa,UAAU,CAACF,GAAG,CAAC;YACzBT,SAAS,EAAEW,UAAU,CAACD,GAAG;UAC3B,CAAC,CAAC;UACFrB,UAAU,CAAC,EAAE,CAAC;QAChB,CAAC,MAAM;UACLY,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;QACtC;MACF,CAAC,CAAC,MAAM;QACND,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;MAC3C;IACF;EACF,CAAC;EACA;EACD;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAACjB,EAAA,CArGID,SAAS;EAAA,QAC0CF,gBAAgB,EACvCC,eAAe;AAAA;AAAA6B,EAAA,GAF3C5B,SAAS;AAuGf,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}