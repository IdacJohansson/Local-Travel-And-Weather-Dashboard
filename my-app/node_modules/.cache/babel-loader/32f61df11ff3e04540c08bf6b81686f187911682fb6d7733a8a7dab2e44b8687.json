{"ast":null,"code":"import { create } from \"zustand\";\nexport const useWeatherStore = create(set => ({\n  weather: null,\n  loading: false,\n  error: null,\n  fetchWeather: async (lat, lon) => {\n    set({\n      loading: true,\n      error: null\n    });\n    const API_KEY = process.env.REACT_APP_WEATHER_API_KEY = \"b4d8b88667fa3e8036fe8543f9bf3902\";\n    console.log(\"ðŸ”‘ Loaded API Key:\", API_KEY);\n    const BASE_URL = \"https://api.openweathermap.org/data/2.5/weather\";\n    const API_URL = `${BASE_URL}?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n    console.log(\"Fetching from:\", API_URL);\n    try {\n      const response = await fetch(API_URL);\n      if (!response.ok) {\n        throw new Error(`API error: ${response.status} - ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log(\"Weather API Response:\", data);\n      set({\n        weather: data,\n        loading: false\n      });\n    } catch (error) {\n      console.error(\"Fetch error:\", error);\n      set({\n        error: error.message,\n        loading: false\n      });\n    }\n  }\n}));","map":{"version":3,"names":["create","useWeatherStore","set","weather","loading","error","fetchWeather","lat","lon","API_KEY","process","env","REACT_APP_WEATHER_API_KEY","console","log","BASE_URL","API_URL","response","fetch","ok","Error","status","statusText","data","json","message"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/store/weatherStore.ts"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\ninterface WeatherData {\r\n  name: string;\r\n  main: {\r\n    temp: number;\r\n  };\r\n  weather: { description: string; icon: string }[];\r\n}\r\n\r\ninterface WeatherState {\r\n  weather: WeatherData | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  fetchWeather: (lat: number, lon: number) => Promise<void>;  \r\n}\r\n\r\nexport const useWeatherStore = create<WeatherState>((set) => ({\r\n  weather: null,\r\n  loading: false,\r\n  error: null,\r\n\r\n  fetchWeather: async (lat: number, lon: number) => {  \r\n    set({ loading: true, error: null });\r\n\r\n    const API_KEY = process.env.REACT_APP_WEATHER_API_KEY=\"b4d8b88667fa3e8036fe8543f9bf3902\";\r\n    console.log(\"ðŸ”‘ Loaded API Key:\", API_KEY);\r\n\r\n    const BASE_URL = \"https://api.openweathermap.org/data/2.5/weather\";\r\n    const API_URL = `${BASE_URL}?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\r\n\r\n    console.log(\"Fetching from:\", API_URL);\r\n\r\n    try {\r\n      const response = await fetch(API_URL);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status} - ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"Weather API Response:\", data);\r\n\r\n      set({ weather: data, loading: false });\r\n    } catch (error: any) {\r\n      console.error(\"Fetch error:\", error);\r\n      set({ error: error.message, loading: false });\r\n    }\r\n  },\r\n}));\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAiBhC,OAAO,MAAMC,eAAe,GAAGD,MAAM,CAAgBE,GAAG,KAAM;EAC5DC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EAEXC,YAAY,EAAE,MAAAA,CAAOC,GAAW,EAAEC,GAAW,KAAK;IAChDN,GAAG,CAAC;MAAEE,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IAEnC,MAAMI,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB,GAAC,kCAAkC;IACxFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEL,OAAO,CAAC;IAE1C,MAAMM,QAAQ,GAAG,iDAAiD;IAClE,MAAMC,OAAO,GAAG,GAAGD,QAAQ,QAAQR,GAAG,QAAQC,GAAG,UAAUC,OAAO,eAAe;IAEjFI,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEE,OAAO,CAAC;IAEtC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,OAAO,CAAC;MAErC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAcH,QAAQ,CAACI,MAAM,MAAMJ,QAAQ,CAACK,UAAU,EAAE,CAAC;MAC3E;MAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAClCX,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAES,IAAI,CAAC;MAE1CrB,GAAG,CAAC;QAAEC,OAAO,EAAEoB,IAAI;QAAEnB,OAAO,EAAE;MAAM,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnBQ,OAAO,CAACR,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCH,GAAG,CAAC;QAAEG,KAAK,EAAEA,KAAK,CAACoB,OAAO;QAAErB,OAAO,EAAE;MAAM,CAAC,CAAC;IAC/C;EACF;AACF,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}