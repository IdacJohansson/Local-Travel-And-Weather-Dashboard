{"ast":null,"code":"var _jsxFileName = \"/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/components/SearchBox/SearchBox.tsx\",\n  _s = $RefreshSig$();\n// import { useState, useRef, useEffect } from \"react\";\n// import { useLocationStore } from \"../../store/useInputStore\";\n// import { useTrafficStore } from \"../../store/useTrafficStore\";\n\n// const SearchBox = () => {\n//   const { location, address, setLocation, setAddress } = useLocationStore();\n//   const { fetchTrafficUpdates } = useTrafficStore();\n//   const inputRef = useRef<HTMLInputElement>(null);\n\n//   useEffect(() => {\n//     console.log(\"Location in SearchBox:\", location);\n//     if (location) {\n//       fetchTrafficUpdates();\n//     }\n//   }, [location]);\n\n//   const getLocation = async () => {\n//     if (address.trim() === \"\") {\n//       if (navigator.geolocation) {\n//         navigator.geolocation.getCurrentPosition(\n//           (position) => {\n//             const latitude = position.coords.latitude;\n//             const longitude = position.coords.longitude;\n//             setLocation({ latitude, longitude });\n//           },\n//           () => {\n//             console.error(\"Unable to retrieve location.\");\n//           }\n//         );\n//       } else {\n//         console.error(\"Geolocation is not supported by this browser.\");\n//       }\n//     } else {\n//       try {\n//         const response = await fetch(\n//           `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\n//             address\n//           )}`\n//         );\n//         const data = await response.json();\n//         if (data.length > 0) {\n//           const { lat, lon } = data[0];\n//           setLocation({\n//             latitude: parseFloat(lat),\n//             longitude: parseFloat(lon),\n//           });\n//           setAddress(\"\");\n//         } else {\n//           console.error(\"Location not found.\");\n//         }\n//       } catch {\n//         console.error(\"Error fetching location.\");\n//       }\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <input\n//         ref={inputRef}\n//         type=\"text\"\n//         placeholder=\"Search for a location...\"\n//         value={address}\n//         onChange={(e) => setAddress(e.target.value)}\n//       />\n//       <button onClick={getLocation}>Get Location</button>\n//       <p>\n//         {location\n//           ? `Latitude: ${location.latitude}, Longitude: ${location.longitude}`\n//           : \"No location available\"}\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default SearchBox;\n\nimport { useRef } from \"react\";\nimport { useLocationStore } from \"../../store/useLocationStore\";\nimport { useTrafficStore } from \"../../store/useTrafficStore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBox = () => {\n  _s();\n  const {\n    location,\n    address,\n    setLocation,\n    setAddress\n  } = useLocationStore();\n  const {\n    fetchTrafficUpdates\n  } = useTrafficStore();\n  const inputRef = useRef(null);\n\n  // useEffect(() => {\n  //   if (location) {\n  //     console.log(\"Location updated, fetching traffic updates...\");\n  //     fetchTrafficUpdates();\n  //   }\n  // }, [location]);\n\n  // const getLocation = async () => {\n  //   if (address.trim() === \"\") {\n  //     if (navigator.geolocation) {\n  //       navigator.geolocation.getCurrentPosition(\n  //         (position) => {\n  //           const {longitude, latitude} = position.coords;\n  //           setLocation({ longitude, latitude});\n  //           fetchTrafficUpdates();\n  //           console.log(\n  //             `User's geolocation: Latitude: ${latitude}, Longitude: ${longitude}`\n  //           );\n\n  //         },\n  //         () => {\n  //           console.error(\"Unable to retrieve location.\");\n  //         }\n  //       );\n  //     } else {\n  //       console.error(\"Geolocation is not supported.\");\n  //     }\n  //   } else {\n  //     try {\n  //       const response = await fetch(\n  //         `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`\n  //       );\n  //       const data = await response.json();\n  //       if (data.length > 0) {\n  //         const { lat, lon } = data[0];\n  //         console.log(\n  //           `Location found for ${address}: Longitude: ${lon}, Latitude: ${lat}`\n  //         );\n  //         setLocation({longitude: parseFloat(lon), latitude: parseFloat(lat),});\n  //         setAddress(\"\");\n  //         fetchTrafficUpdates();\n  //       } else {\n  //         console.error(\"Location not found for address:\", address);\n  //       }\n  //     } catch (error) {\n  //       console.error(\"Error fetching location for address:\", error);\n  //     }\n  //   }\n  // };\n\n  const getLocation = async () => {\n    if (address.trim() === \"\") {\n      console.error(\"Please enter a city name.\");\n      return;\n    }\n    try {\n      fetchTrafficUpdates(address); // Skicka stadens namn direkt\n    } catch (error) {\n      console.error(\"Error fetching location for address:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      placeholder: \"Search for a location...\",\n      value: address,\n      onChange: e => setAddress(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getLocation,\n      children: \"Get Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: location ? `Longitude: ${location.longitude}, Latitude: ${location.latitude}` : \"No location available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBox, \"ApThJe2/YIZFBgsIQOBaDPSg0yg=\", false, function () {\n  return [useLocationStore, useTrafficStore];\n});\n_c = SearchBox;\nexport default SearchBox;\nvar _c;\n$RefreshReg$(_c, \"SearchBox\");","map":{"version":3,"names":["useRef","useLocationStore","useTrafficStore","jsxDEV","_jsxDEV","SearchBox","_s","location","address","setLocation","setAddress","fetchTrafficUpdates","inputRef","getLocation","trim","console","error","children","ref","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","longitude","latitude","_c","$RefreshReg$"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/components/SearchBox/SearchBox.tsx"],"sourcesContent":["// import { useState, useRef, useEffect } from \"react\";\r\n// import { useLocationStore } from \"../../store/useInputStore\";\r\n// import { useTrafficStore } from \"../../store/useTrafficStore\";\r\n\r\n// const SearchBox = () => {\r\n//   const { location, address, setLocation, setAddress } = useLocationStore();\r\n//   const { fetchTrafficUpdates } = useTrafficStore();\r\n//   const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n//   useEffect(() => {\r\n//     console.log(\"Location in SearchBox:\", location);\r\n//     if (location) {\r\n//       fetchTrafficUpdates();\r\n//     }\r\n//   }, [location]);\r\n\r\n//   const getLocation = async () => {\r\n//     if (address.trim() === \"\") {\r\n//       if (navigator.geolocation) {\r\n//         navigator.geolocation.getCurrentPosition(\r\n//           (position) => {\r\n//             const latitude = position.coords.latitude;\r\n//             const longitude = position.coords.longitude;\r\n//             setLocation({ latitude, longitude });\r\n//           },\r\n//           () => {\r\n//             console.error(\"Unable to retrieve location.\");\r\n//           }\r\n//         );\r\n//       } else {\r\n//         console.error(\"Geolocation is not supported by this browser.\");\r\n//       }\r\n//     } else {\r\n//       try {\r\n//         const response = await fetch(\r\n//           `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(\r\n//             address\r\n//           )}`\r\n//         );\r\n//         const data = await response.json();\r\n//         if (data.length > 0) {\r\n//           const { lat, lon } = data[0];\r\n//           setLocation({\r\n//             latitude: parseFloat(lat),\r\n//             longitude: parseFloat(lon),\r\n//           });\r\n//           setAddress(\"\");\r\n//         } else {\r\n//           console.error(\"Location not found.\");\r\n//         }\r\n//       } catch {\r\n//         console.error(\"Error fetching location.\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <input\r\n//         ref={inputRef}\r\n//         type=\"text\"\r\n//         placeholder=\"Search for a location...\"\r\n//         value={address}\r\n//         onChange={(e) => setAddress(e.target.value)}\r\n//       />\r\n//       <button onClick={getLocation}>Get Location</button>\r\n//       <p>\r\n//         {location\r\n//           ? `Latitude: ${location.latitude}, Longitude: ${location.longitude}`\r\n//           : \"No location available\"}\r\n//       </p>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default SearchBox;\r\n\r\nimport { useRef, useEffect } from \"react\";\r\nimport { useLocationStore } from \"../../store/useLocationStore\";\r\nimport { useTrafficStore } from \"../../store/useTrafficStore\";\r\n\r\nconst SearchBox = () => {\r\n  const { location, address, setLocation, setAddress } = useLocationStore();\r\n  const { fetchTrafficUpdates } = useTrafficStore();\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // useEffect(() => {\r\n  //   if (location) {\r\n  //     console.log(\"Location updated, fetching traffic updates...\");\r\n  //     fetchTrafficUpdates();\r\n  //   }\r\n  // }, [location]);\r\n\r\n  // const getLocation = async () => {\r\n  //   if (address.trim() === \"\") {\r\n  //     if (navigator.geolocation) {\r\n  //       navigator.geolocation.getCurrentPosition(\r\n  //         (position) => {\r\n  //           const {longitude, latitude} = position.coords;\r\n  //           setLocation({ longitude, latitude});\r\n  //           fetchTrafficUpdates();\r\n  //           console.log(\r\n  //             `User's geolocation: Latitude: ${latitude}, Longitude: ${longitude}`\r\n  //           );\r\n            \r\n  //         },\r\n  //         () => {\r\n  //           console.error(\"Unable to retrieve location.\");\r\n  //         }\r\n  //       );\r\n  //     } else {\r\n  //       console.error(\"Geolocation is not supported.\");\r\n  //     }\r\n  //   } else {\r\n  //     try {\r\n  //       const response = await fetch(\r\n  //         `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`\r\n  //       );\r\n  //       const data = await response.json();\r\n  //       if (data.length > 0) {\r\n  //         const { lat, lon } = data[0];\r\n  //         console.log(\r\n  //           `Location found for ${address}: Longitude: ${lon}, Latitude: ${lat}`\r\n  //         );\r\n  //         setLocation({longitude: parseFloat(lon), latitude: parseFloat(lat),});\r\n  //         setAddress(\"\");\r\n  //         fetchTrafficUpdates();\r\n  //       } else {\r\n  //         console.error(\"Location not found for address:\", address);\r\n  //       }\r\n  //     } catch (error) {\r\n  //       console.error(\"Error fetching location for address:\", error);\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  const getLocation = async () => {\r\n    if (address.trim() === \"\") {\r\n      console.error(\"Please enter a city name.\");\r\n      return;\r\n    }\r\n    try {\r\n      fetchTrafficUpdates(address); // Skicka stadens namn direkt\r\n    } catch (error) {\r\n      console.error(\"Error fetching location for address:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        placeholder=\"Search for a location...\"\r\n        value={address}\r\n        onChange={(e) => setAddress(e.target.value)}\r\n      />\r\n      <button onClick={getLocation}>Get Location</button>\r\n      <p>\r\n        {location\r\n          ? `Longitude: ${location.longitude}, Latitude: ${location.latitude}`\r\n          : \"No location available\"}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,MAAM,QAAmB,OAAO;AACzC,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,eAAe,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,WAAW;IAAEC;EAAW,CAAC,GAAGT,gBAAgB,CAAC,CAAC;EACzE,MAAM;IAAEU;EAAoB,CAAC,GAAGT,eAAe,CAAC,CAAC;EACjD,MAAMU,QAAQ,GAAGZ,MAAM,CAAmB,IAAI,CAAC;;EAE/C;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMa,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAIL,OAAO,CAACM,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACzBC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;MAC1C;IACF;IACA,IAAI;MACFL,mBAAmB,CAACH,OAAO,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D;EACF,CAAC;EAED,oBACEZ,OAAA;IAAAa,QAAA,gBACEb,OAAA;MACEc,GAAG,EAAEN,QAAS;MACdO,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,0BAA0B;MACtCC,KAAK,EAAEb,OAAQ;MACfc,QAAQ,EAAGC,CAAC,IAAKb,UAAU,CAACa,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACFxB,OAAA;MAAQyB,OAAO,EAAEhB,WAAY;MAAAI,QAAA,EAAC;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnDxB,OAAA;MAAAa,QAAA,EACGV,QAAQ,GACL,cAAcA,QAAQ,CAACuB,SAAS,eAAevB,QAAQ,CAACwB,QAAQ,EAAE,GAClE;IAAuB;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAACtB,EAAA,CApFID,SAAS;EAAA,QAC0CJ,gBAAgB,EACvCC,eAAe;AAAA;AAAA8B,EAAA,GAF3C3B,SAAS;AAsFf,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}