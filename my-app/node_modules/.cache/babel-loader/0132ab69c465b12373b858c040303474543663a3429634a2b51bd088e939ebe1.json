{"ast":null,"code":"import { create } from \"zustand\";\nexport const useTrafficStore = create(set => ({\n  trafficUpdates: [],\n  fetchTrafficUpdates: async city => {\n    try {\n      const response = await fetch(`http://localhost:3001/traffic?city=${city}`);\n      const data = await response.json();\n      if (data.RESPONSE && data.RESPONSE.RESULT.length > 0) {\n        const situations = data.RESPONSE.RESULT[0].Situation || [];\n        set({\n          trafficUpdates: situations.flatMap(s => s.Deviation)\n        });\n      } else {\n        set({\n          trafficUpdates: []\n        });\n      }\n    } catch (error) {\n      console.error(\"Error fetching traffic updates:\", error);\n    }\n  }\n}));\n\n// export const useTrafficStore = create<TrafficState>((set) => {\n//   const fetchTrafficUpdates = async () => {\n//     try {\n//       const { location } = useLocationStore.getState();\n//       console.log(\"Location in TrafficStore:\", location);\n\n//       if (!location) {\n//         console.error(\"Location is not set. Cannot fetch traffic updates.\");\n//         return;\n//       }\n\n//       const { latitude, longitude } = location;\n//       console.log(\"Fetching traffic updates for:\", latitude, longitude);\n\n//       const data = await fetchTrafficUpdatesData(latitude, longitude);\n//       const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n\n//       const extractedUpdates: TrafficUpdate[] = situations.flatMap(\n//         (situation: any) =>\n//           situation.Deviation.map((deviation: any) => ({\n//             MessageCode: deviation.MessageCode,\n//             Message: deviation.Message,\n//             SeverityText: deviation.SeverityText,\n//             CreationTime: deviation.CreationTime,\n//             LocationDescriptor: deviation.LocationDescriptor,\n//           }))\n//       );\n\n//       set({ trafficUpdates: extractedUpdates });\n\n//       console.log(\"Fetched traffic updates:\", extractedUpdates);\n//     } catch (error) {\n//       console.error(\"Failed to load data:\", error);\n//     }\n//   };\n\n//   return {\n//     trafficUpdates: [],\n//     fetchTrafficUpdates,\n//   };\n// });","map":{"version":3,"names":["create","useTrafficStore","set","trafficUpdates","fetchTrafficUpdates","city","response","fetch","data","json","RESPONSE","RESULT","length","situations","Situation","flatMap","s","Deviation","error","console"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/store/useTrafficStore.tsx"],"sourcesContent":["import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\n\nexport interface TrafficUpdate {\n  MessageCode: string;\n  Message: string;\n  SeverityText: string;\n  CreationTime: string;\n  LocationDescriptor: string;\n  Geometry?: {\n    WGS84: string;\n  };\n}\n\nexport interface TrafficState {\n    trafficUpdates: TrafficUpdate[];\n    fetchTrafficUpdates: (city: string) => Promise<void>;\n  }\n\n\n\nexport const useTrafficStore = create((set) => ({\n  trafficUpdates: [],\n  fetchTrafficUpdates: async (city) => {\n    try {\n      const response = await fetch(`http://localhost:3001/traffic?city=${city}`);\n      const data = await response.json();\n      if (data.RESPONSE && data.RESPONSE.RESULT.length > 0) {\n        const situations = data.RESPONSE.RESULT[0].Situation || [];\n        set({ trafficUpdates: situations.flatMap((s: any) => s.Deviation) });\n      } else {\n        set({ trafficUpdates: [] });\n      }\n    } catch (error) {\n      console.error(\"Error fetching traffic updates:\", error);\n    }\n  },\n}));\n\n  // export const useTrafficStore = create<TrafficState>((set) => {\n  //   const fetchTrafficUpdates = async () => {\n  //     try {\n  //       const { location } = useLocationStore.getState();\n  //       console.log(\"Location in TrafficStore:\", location);\n  \n  //       if (!location) {\n  //         console.error(\"Location is not set. Cannot fetch traffic updates.\");\n  //         return;\n  //       }\n  \n  //       const { latitude, longitude } = location;\n  //       console.log(\"Fetching traffic updates for:\", latitude, longitude);\n  \n  //       const data = await fetchTrafficUpdatesData(latitude, longitude);\n  //       const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n  \n  //       const extractedUpdates: TrafficUpdate[] = situations.flatMap(\n  //         (situation: any) =>\n  //           situation.Deviation.map((deviation: any) => ({\n  //             MessageCode: deviation.MessageCode,\n  //             Message: deviation.Message,\n  //             SeverityText: deviation.SeverityText,\n  //             CreationTime: deviation.CreationTime,\n  //             LocationDescriptor: deviation.LocationDescriptor,\n  //           }))\n  //       );\n  \n  //       set({ trafficUpdates: extractedUpdates });\n  \n  //       console.log(\"Fetched traffic updates:\", extractedUpdates);\n  //     } catch (error) {\n  //       console.error(\"Failed to load data:\", error);\n  //     }\n  //   };\n  \n  //   return {\n  //     trafficUpdates: [],\n  //     fetchTrafficUpdates,\n  //   };\n  // });\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAsBhC,OAAO,MAAMC,eAAe,GAAGD,MAAM,CAAEE,GAAG,KAAM;EAC9CC,cAAc,EAAE,EAAE;EAClBC,mBAAmB,EAAE,MAAOC,IAAI,IAAK;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsCF,IAAI,EAAE,CAAC;MAC1E,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,QAAQ,IAAIF,IAAI,CAACE,QAAQ,CAACC,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;QACpD,MAAMC,UAAU,GAAGL,IAAI,CAACE,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,CAACG,SAAS,IAAI,EAAE;QAC1DZ,GAAG,CAAC;UAAEC,cAAc,EAAEU,UAAU,CAACE,OAAO,CAAEC,CAAM,IAAKA,CAAC,CAACC,SAAS;QAAE,CAAC,CAAC;MACtE,CAAC,MAAM;QACLf,GAAG,CAAC;UAAEC,cAAc,EAAE;QAAG,CAAC,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF;AACF,CAAC,CAAC,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}