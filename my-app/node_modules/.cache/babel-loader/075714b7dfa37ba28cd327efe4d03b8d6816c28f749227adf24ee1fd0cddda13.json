{"ast":null,"code":"var _jsxFileName = \"/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/components/TransportDepartures/TransportDepartures.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransportDepartures = () => {\n  _s();\n  const [departures, setDepartures] = useState([]);\n  const [address, setAddress] = useState(\"\");\n  const [latitude, setLatitude] = useState(null);\n  const [longitude, setLongitude] = useState(null);\n  const [error, setError] = useState(\"\");\n  const TRAFIKEVERKET_API_KEY = \"db7b4d95-5656-4bec-8239-55ae38100ed2\";\n  const GEOCODING_API_KEY = \"53955b1b20e34129a80ed99f47485f5d\";\n  const parseXML = xml => {\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xml, \"text/xml\");\n    const errorNode = xmlDoc.querySelector(\"parsererror\");\n    if (errorNode) throw new Error(\"Error parsing XML\");\n    return xmlDoc;\n  };\n  const fetchDepartures = async () => {\n    console.log(\"Fetching departures for lat:\", latitude, \"lon:\", longitude);\n    if (latitude && longitude) {\n      try {\n        const requestBody = `<REQUEST>\n          <LOGIN authenticationkey=\"${TRAFIKEVERKET_API_KEY}\" />\n          <QUERY objecttype=\"TrainAnnouncement\" orderby=\"AdvertisedTimeAtLocation\" schemaversion=\"1.0\">\n            <FILTER>\n              <EQ name=\"ActivityType\" value=\"Avgang\" />\n              <EQ name=\"LocationSignature\" value=\"${latitude},${longitude}\" />\n              <GT name=\"AdvertisedTimeAtLocation\" value=\"$NOW\" />\n              <LT name=\"AdvertisedTimeAtLocation\" value=\"$NOW.AddHours(2)\" />\n            </FILTER>\n            <INCLUDE>AdvertisedTimeAtLocation</INCLUDE>\n            <INCLUDE>ProductInformation</INCLUDE>\n            <INCLUDE>ToLocation</INCLUDE>\n          </QUERY>\n        </REQUEST>`;\n        const response = await fetch(\"https://api.trafikinfo.trafikverket.se/v2/data.xml\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"text/xml\",\n            Accept: \"application/xml\"\n          },\n          body: requestBody\n        });\n        const textData = await response.text();\n        console.log(\"Trafikverket API Response:\", textData);\n        const xmlDoc = parseXML(textData);\n        const trainAnnouncements = xmlDoc.getElementsByTagName(\"TrainAnnouncement\");\n        if (trainAnnouncements.length > 0) {\n          const departuresList = Array.from(trainAnnouncements).map(item => {\n            var _item$getElementsByTa, _item$getElementsByTa2;\n            const time = item.getElementsByTagName(\"AdvertisedTimeAtLocation\")[0].textContent;\n            const transportType = ((_item$getElementsByTa = item.getElementsByTagName(\"ProductInformation\")[0]) === null || _item$getElementsByTa === void 0 ? void 0 : _item$getElementsByTa.textContent) || \"Unknown\";\n            const destination = ((_item$getElementsByTa2 = item.getElementsByTagName(\"ToLocation\")[0]) === null || _item$getElementsByTa2 === void 0 ? void 0 : _item$getElementsByTa2.textContent) || \"Unknown\";\n            return {\n              time,\n              transportType,\n              destination\n            };\n          });\n          setDepartures(departuresList);\n          setError(\"\");\n        } else {\n          setDepartures([]);\n          setError(\"No departures found for this location.\");\n        }\n      } catch (error) {\n        setError(\"Error fetching transport data.\");\n        console.error(\"Transport API error:\", error);\n      }\n    }\n  };\n  const handleAddressChange = async event => {\n    const newAddress = event.target.value;\n    setAddress(newAddress);\n    if (newAddress) {\n      console.log(\"Fetching geocode for address:\", newAddress);\n      try {\n        const geocodeResponse = await fetch(`https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(newAddress)}&key=${GEOCODING_API_KEY}`);\n        const geocodeData = await geocodeResponse.json();\n        console.log(\"Geocode API Response:\", geocodeData);\n        if (geocodeData.results && geocodeData.results.length > 0) {\n          const {\n            lat,\n            lng\n          } = geocodeData.results[0].geometry;\n          setLatitude(lat);\n          setLongitude(lng);\n          setError(\"\");\n        } else {\n          setError(\"Location not found. Try another address.\");\n        }\n      } catch (error) {\n        setError(\"Error geocoding the address.\");\n        console.error(\"Geocoding error:\", error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (latitude && longitude) {\n      console.log(\"Latitude and Longitude updated:\", latitude, longitude);\n      fetchDepartures();\n    }\n  }, [latitude, longitude]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-xl mx-auto p-6 bg-gray-100 shadow-lg rounded-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold text-gray-800 text-center mb-4\",\n      children: \"Transport Departures\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter location\",\n      value: address,\n      onChange: handleAddressChange,\n      className: \"w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 mb-4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-600 text-center\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this), departures.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"bg-white p-4 rounded-lg shadow-md\",\n      children: departures.map((departure, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"border-b py-2 flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-semibold\",\n          children: departure.time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-blue-500\",\n          children: departure.transportType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-700\",\n          children: [\"to \", departure.destination]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-600 text-center\",\n      children: \"No departures available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(TransportDepartures, \"EF4VjJohhMNMHC6w9ZYsfc0G884=\");\n_c = TransportDepartures;\nexport default TransportDepartures;\nvar _c;\n$RefreshReg$(_c, \"TransportDepartures\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TransportDepartures","_s","departures","setDepartures","address","setAddress","latitude","setLatitude","longitude","setLongitude","error","setError","TRAFIKEVERKET_API_KEY","GEOCODING_API_KEY","parseXML","xml","parser","DOMParser","xmlDoc","parseFromString","errorNode","querySelector","Error","fetchDepartures","console","log","requestBody","response","fetch","method","headers","Accept","body","textData","text","trainAnnouncements","getElementsByTagName","length","departuresList","Array","from","map","item","_item$getElementsByTa","_item$getElementsByTa2","time","textContent","transportType","destination","handleAddressChange","event","newAddress","target","value","geocodeResponse","encodeURIComponent","geocodeData","json","results","lat","lng","geometry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","departure","index","_c","$RefreshReg$"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/components/TransportDepartures/TransportDepartures.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\ninterface Departure {\r\n  time: string;\r\n  transportType: string;\r\n  destination: string;\r\n}\r\n\r\nconst TransportDepartures: React.FC = () => {\r\n  const [departures, setDepartures] = useState<Departure[]>([]);\r\n  const [address, setAddress] = useState(\"\");\r\n  const [latitude, setLatitude] = useState<number | null>(null);\r\n  const [longitude, setLongitude] = useState<number | null>(null);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const TRAFIKEVERKET_API_KEY = \"db7b4d95-5656-4bec-8239-55ae38100ed2\";\r\n  const GEOCODING_API_KEY = \"53955b1b20e34129a80ed99f47485f5d\";\r\n\r\n  const parseXML = (xml: string) => {\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(xml, \"text/xml\");\r\n    const errorNode = xmlDoc.querySelector(\"parsererror\");\r\n    if (errorNode) throw new Error(\"Error parsing XML\");\r\n    return xmlDoc;\r\n  };\r\n\r\n  const fetchDepartures = async () => {\r\n    console.log(\"Fetching departures for lat:\", latitude, \"lon:\", longitude);\r\n    if (latitude && longitude) {\r\n      try {\r\n        const requestBody = `<REQUEST>\r\n          <LOGIN authenticationkey=\"${TRAFIKEVERKET_API_KEY}\" />\r\n          <QUERY objecttype=\"TrainAnnouncement\" orderby=\"AdvertisedTimeAtLocation\" schemaversion=\"1.0\">\r\n            <FILTER>\r\n              <EQ name=\"ActivityType\" value=\"Avgang\" />\r\n              <EQ name=\"LocationSignature\" value=\"${latitude},${longitude}\" />\r\n              <GT name=\"AdvertisedTimeAtLocation\" value=\"$NOW\" />\r\n              <LT name=\"AdvertisedTimeAtLocation\" value=\"$NOW.AddHours(2)\" />\r\n            </FILTER>\r\n            <INCLUDE>AdvertisedTimeAtLocation</INCLUDE>\r\n            <INCLUDE>ProductInformation</INCLUDE>\r\n            <INCLUDE>ToLocation</INCLUDE>\r\n          </QUERY>\r\n        </REQUEST>`;\r\n\r\n        const response = await fetch(\"https://api.trafikinfo.trafikverket.se/v2/data.xml\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"text/xml\", Accept: \"application/xml\" },\r\n          body: requestBody,\r\n        });\r\n\r\n        const textData = await response.text();\r\n        console.log(\"Trafikverket API Response:\", textData);\r\n        const xmlDoc = parseXML(textData);\r\n\r\n        const trainAnnouncements = xmlDoc.getElementsByTagName(\"TrainAnnouncement\");\r\n        if (trainAnnouncements.length > 0) {\r\n          const departuresList = Array.from(trainAnnouncements).map((item: any) => {\r\n            const time = item.getElementsByTagName(\"AdvertisedTimeAtLocation\")[0].textContent;\r\n            const transportType = item.getElementsByTagName(\"ProductInformation\")[0]?.textContent || \"Unknown\";\r\n            const destination = item.getElementsByTagName(\"ToLocation\")[0]?.textContent || \"Unknown\";\r\n            return { time, transportType, destination };\r\n          });\r\n\r\n          setDepartures(departuresList);\r\n          setError(\"\");\r\n        } else {\r\n          setDepartures([]);\r\n          setError(\"No departures found for this location.\");\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error fetching transport data.\");\r\n        console.error(\"Transport API error:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAddressChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newAddress = event.target.value;\r\n    setAddress(newAddress);\r\n\r\n    if (newAddress) {\r\n      console.log(\"Fetching geocode for address:\", newAddress);\r\n      try {\r\n        const geocodeResponse = await fetch(\r\n          `https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(newAddress)}&key=${GEOCODING_API_KEY}`\r\n        );\r\n        const geocodeData = await geocodeResponse.json();\r\n        console.log(\"Geocode API Response:\", geocodeData);\r\n\r\n        if (geocodeData.results && geocodeData.results.length > 0) {\r\n          const { lat, lng } = geocodeData.results[0].geometry;\r\n          setLatitude(lat);\r\n          setLongitude(lng);\r\n          setError(\"\");\r\n        } else {\r\n          setError(\"Location not found. Try another address.\");\r\n        }\r\n      } catch (error) {\r\n        setError(\"Error geocoding the address.\");\r\n        console.error(\"Geocoding error:\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (latitude && longitude) {\r\n      console.log(\"Latitude and Longitude updated:\", latitude, longitude);\r\n      fetchDepartures();\r\n    }\r\n  }, [latitude, longitude]);\r\n\r\n  return (\r\n    <div className=\"max-w-xl mx-auto p-6 bg-gray-100 shadow-lg rounded-lg\">\r\n      <h2 className=\"text-2xl font-semibold text-gray-800 text-center mb-4\">Transport Departures</h2>\r\n\r\n      {/* Address Input */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter location\"\r\n        value={address}\r\n        onChange={handleAddressChange}\r\n        className=\"w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 mb-4\"\r\n      />\r\n\r\n      {/* Error Message */}\r\n      {error && <p className=\"text-red-600 text-center\">{error}</p>}\r\n\r\n      {/* Departures List */}\r\n      {departures.length > 0 ? (\r\n        <ul className=\"bg-white p-4 rounded-lg shadow-md\">\r\n          {departures.map((departure, index) => (\r\n            <li key={index} className=\"border-b py-2 flex justify-between items-center\">\r\n              <span className=\"font-semibold\">{departure.time}</span>\r\n              <span className=\"text-blue-500\">{departure.transportType}</span>\r\n              <span className=\"text-gray-700\">to {departure.destination}</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p className=\"text-gray-600 text-center\">No departures available</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransportDepartures;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}