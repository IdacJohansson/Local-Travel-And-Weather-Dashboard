{"ast":null,"code":"import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\nexport const useTrafficStore = create(set => {\n  const fetchTrafficUpdates = async () => {\n    try {\n      var _data$RESPONSE$RESULT;\n      const {\n        location\n      } = useLocationStore.getState();\n      console.log(\"Location in TrafficStore:\", location);\n      if (!location) {\n        console.error(\"Location is not set. Cannot fetch traffic updates.\");\n        return;\n      }\n      const {\n        latitude,\n        longitude\n      } = location;\n      console.log(\"Fetching traffic updates for:\", latitude, longitude);\n      const data = await fetchTrafficUpdatesData(latitude, longitude);\n      const situations = ((_data$RESPONSE$RESULT = data.RESPONSE.RESULT[0]) === null || _data$RESPONSE$RESULT === void 0 ? void 0 : _data$RESPONSE$RESULT.Situation) || [];\n      const extractedUpdates = situations.flatMap(situation => (situation.Deviation || []).slice(0, 1).map(deviation => ({\n        MessageCode: deviation.MessageCode,\n        Message: deviation.Message,\n        SeverityText: deviation.SeverityText,\n        CreationTime: deviation.CreationTime,\n        LocationDescriptor: deviation.LocationDescriptor\n      })));\n      set({\n        trafficUpdates: extractedUpdates\n      });\n      console.log(\"Fetched traffic updates:\", extractedUpdates);\n    } catch (error) {\n      console.error(\"Failed to load data:\", error);\n    }\n  };\n  return {\n    trafficUpdates: [],\n    fetchTrafficUpdates\n  };\n});","map":{"version":3,"names":["create","fetchTrafficUpdatesData","useLocationStore","useTrafficStore","set","fetchTrafficUpdates","_data$RESPONSE$RESULT","location","getState","console","log","error","latitude","longitude","data","situations","RESPONSE","RESULT","Situation","extractedUpdates","flatMap","situation","Deviation","slice","map","deviation","MessageCode","Message","SeverityText","CreationTime","LocationDescriptor","trafficUpdates"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/store/useTrafficStore.tsx"],"sourcesContent":["import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\n\nexport interface TrafficUpdate {\n  MessageCode: string;\n  Message: string;\n  SeverityText: string;\n  CreationTime: string;\n  LocationDescriptor: string;\n  Geometry?: {\n    WGS84: string;\n  };\n}\n\nexport interface TrafficState {\n    trafficUpdates: TrafficUpdate[];\n    fetchTrafficUpdates: () => Promise<void>;\n  }\n\n  export const useTrafficStore = create<TrafficState>((set) => {\n    const fetchTrafficUpdates = async () => {\n      try {\n        const { location } = useLocationStore.getState();\n        console.log(\"Location in TrafficStore:\", location);\n  \n        if (!location) {\n          console.error(\"Location is not set. Cannot fetch traffic updates.\");\n          return;\n        }\n  \n        const { latitude, longitude } = location;\n        console.log(\"Fetching traffic updates for:\", latitude, longitude);\n  \n        const data = await fetchTrafficUpdatesData(latitude, longitude);\n        const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n  \n        const extractedUpdates: TrafficUpdate[] = situations.flatMap(\n          (situation: any) =>\n            (situation.Deviation || []).slice(0, 1).map((deviation: any) => ({\n              MessageCode: deviation.MessageCode,\n              Message: deviation.Message,\n              SeverityText: deviation.SeverityText,\n              CreationTime: deviation.CreationTime,\n              LocationDescriptor: deviation.LocationDescriptor,\n            }))\n        );\n  \n        set({ trafficUpdates: extractedUpdates });\n  \n        console.log(\"Fetched traffic updates:\", extractedUpdates);\n      } catch (error) {\n        console.error(\"Failed to load data:\", error);\n      }\n    };\n  \n    return {\n      trafficUpdates: [],\n      fetchTrafficUpdates,\n    };\n  });\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,uBAAuB,QAAQ,wBAAwB;AAChE,SAASC,gBAAgB,QAAQ,oBAAoB;AAkBnD,OAAO,MAAMC,eAAe,GAAGH,MAAM,CAAgBI,GAAG,IAAK;EAC3D,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MAAA,IAAAC,qBAAA;MACF,MAAM;QAAEC;MAAS,CAAC,GAAGL,gBAAgB,CAACM,QAAQ,CAAC,CAAC;MAChDC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEH,QAAQ,CAAC;MAElD,IAAI,CAACA,QAAQ,EAAE;QACbE,OAAO,CAACE,KAAK,CAAC,oDAAoD,CAAC;QACnE;MACF;MAEA,MAAM;QAAEC,QAAQ;QAAEC;MAAU,CAAC,GAAGN,QAAQ;MACxCE,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEE,QAAQ,EAAEC,SAAS,CAAC;MAEjE,MAAMC,IAAI,GAAG,MAAMb,uBAAuB,CAACW,QAAQ,EAAEC,SAAS,CAAC;MAC/D,MAAME,UAAU,GAAG,EAAAT,qBAAA,GAAAQ,IAAI,CAACE,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC,cAAAX,qBAAA,uBAAvBA,qBAAA,CAAyBY,SAAS,KAAI,EAAE;MAE3D,MAAMC,gBAAiC,GAAGJ,UAAU,CAACK,OAAO,CACzDC,SAAc,IACb,CAACA,SAAS,CAACC,SAAS,IAAI,EAAE,EAAEC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAEC,SAAc,KAAM;QAC/DC,WAAW,EAAED,SAAS,CAACC,WAAW;QAClCC,OAAO,EAAEF,SAAS,CAACE,OAAO;QAC1BC,YAAY,EAAEH,SAAS,CAACG,YAAY;QACpCC,YAAY,EAAEJ,SAAS,CAACI,YAAY;QACpCC,kBAAkB,EAAEL,SAAS,CAACK;MAChC,CAAC,CAAC,CACN,CAAC;MAED1B,GAAG,CAAC;QAAE2B,cAAc,EAAEZ;MAAiB,CAAC,CAAC;MAEzCV,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAES,gBAAgB,CAAC;IAC3D,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,OAAO;IACLoB,cAAc,EAAE,EAAE;IAClB1B;EACF,CAAC;AACH,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}