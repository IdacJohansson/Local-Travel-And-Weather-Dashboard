{"ast":null,"code":"// import { create } from \"zustand\";\n\n// interface LocationState {\n//     location: {latitude: number, longitude: number};\n//     address: string;\n//     setLocation: (latitude: number, longitude: number) => void;\n//     setAddress: (address: string) => void;\n//   }\n\n//   export const useLocationStore = create<LocationState>((set) => ({\n//     location: {latitude: 0, longitude: 0},\n//     address: \"\",\n//     setLocation: (location) => {\n//       console.log(\"setting location från userInputStore: \", latitude, longitude);\n//       set({ location: {latitude, longitude} });\n//     },\n//     setAddress: (address) => {\n//       set({ address });\n//     },\n//   }));\n\nimport { create } from \"zustand\";\nexport const useLocationStore = create(set => ({\n  location: {\n    latitude: 0,\n    longitude: 0\n  },\n  // Standardvärden\n  address: \"\",\n  setLocation: (latitude, longitude) => {\n    console.log(\"setting location från userInputStore: \", latitude, longitude);\n    set({\n      location: {\n        latitude,\n        longitude\n      }\n    });\n  },\n  setAddress: address => {\n    set({\n      address\n    });\n  }\n}));\n\n// frel format?","map":{"version":3,"names":["create","useLocationStore","set","location","latitude","longitude","address","setLocation","console","log","setAddress"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/store/useInputStore.tsx"],"sourcesContent":["// import { create } from \"zustand\";\n\n// interface LocationState {\n//     location: {latitude: number, longitude: number};\n//     address: string;\n//     setLocation: (latitude: number, longitude: number) => void;\n//     setAddress: (address: string) => void;\n//   }\n  \n//   export const useLocationStore = create<LocationState>((set) => ({\n//     location: {latitude: 0, longitude: 0},\n//     address: \"\",\n//     setLocation: (location) => {\n//       console.log(\"setting location från userInputStore: \", latitude, longitude);\n//       set({ location: {latitude, longitude} });\n//     },\n//     setAddress: (address) => {\n//       set({ address });\n//     },\n//   }));\n\nimport { create } from \"zustand\";\n\ninterface LocationState {\n    location: { latitude: number, longitude: number };\n    address: string;\n    setLocation: (latitude: number, longitude: number) => void;\n    setAddress: (address: string) => void;\n}\n\nexport const useLocationStore = create<LocationState>((set) => ({\n    location: { latitude: 0, longitude: 0 },  // Standardvärden\n    address: \"\",\n    setLocation: (latitude, longitude) => {\n        console.log(\"setting location från userInputStore: \", latitude, longitude);\n        set({ location: { latitude, longitude } });\n    },\n    setAddress: (address) => {\n        set({ address });\n    },\n}));\n\n  // frel format? "],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,MAAM,QAAQ,SAAS;AAShC,OAAO,MAAMC,gBAAgB,GAAGD,MAAM,CAAiBE,GAAG,KAAM;EAC5DC,QAAQ,EAAE;IAAEC,QAAQ,EAAE,CAAC;IAAEC,SAAS,EAAE;EAAE,CAAC;EAAG;EAC1CC,OAAO,EAAE,EAAE;EACXC,WAAW,EAAEA,CAACH,QAAQ,EAAEC,SAAS,KAAK;IAClCG,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEL,QAAQ,EAAEC,SAAS,CAAC;IAC1EH,GAAG,CAAC;MAAEC,QAAQ,EAAE;QAAEC,QAAQ;QAAEC;MAAU;IAAE,CAAC,CAAC;EAC9C,CAAC;EACDK,UAAU,EAAGJ,OAAO,IAAK;IACrBJ,GAAG,CAAC;MAAEI;IAAQ,CAAC,CAAC;EACpB;AACJ,CAAC,CAAC,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}