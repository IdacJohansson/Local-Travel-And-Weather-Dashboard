{"ast":null,"code":"import { create } from \"zustand\";\nexport const useTrafficStore = create(set => {\n  // const fetchTrafficUpdates = async () => {\n  //   try {\n  //     const { location } = useLocationStore.getState();\n  //     console.log(\"Location in TrafficStore:\", location);\n\n  //     if (!location) {\n  //       console.error(\"Location is not set. Cannot fetch traffic updates.\");\n  //       return;\n  //     }\n\n  //     const { latitude, longitude } = location;\n  //     console.log(\"Fetching traffic updates for:\", latitude, longitude);\n\n  //     const data = await fetchTrafficUpdatesData(latitude, longitude);\n  //     const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n\n  //     const extractedUpdates: TrafficUpdate[] = situations.flatMap(\n  //       (situation: any) =>\n  //         situation.Deviation.map((deviation: any) => ({\n  //           MessageCode: deviation.MessageCode,\n  //           Message: deviation.Message,\n  //           SeverityText: deviation.SeverityText,\n  //           CreationTime: deviation.CreationTime,\n  //           LocationDescriptor: deviation.LocationDescriptor,\n  //         }))\n  //     );\n\n  //     set({ trafficUpdates: extractedUpdates });\n\n  //     console.log(\"Fetched traffic updates:\", extractedUpdates);\n  //   } catch (error) {\n  //     console.error(\"Failed to load data:\", error);\n  //   }\n  // };\n\n  // return {\n  //   trafficUpdates: [],\n  //   fetchTrafficUpdates,\n  // };\n});","map":{"version":3,"names":["create","useTrafficStore","set"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/store/useTrafficStore.tsx"],"sourcesContent":["import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\n\nexport interface TrafficUpdate {\n  MessageCode: string;\n  Message: string;\n  SeverityText: string;\n  CreationTime: string;\n  LocationDescriptor: string;\n  Geometry?: {\n    WGS84: string;\n  };\n}\n\nexport interface TrafficState {\n    trafficUpdates: TrafficUpdate[];\n    fetchTrafficUpdates: () => Promise<void>;\n  }\n\n\n  export const useTrafficStore = create<TrafficState>((set) => {\n    // const fetchTrafficUpdates = async () => {\n    //   try {\n    //     const { location } = useLocationStore.getState();\n    //     console.log(\"Location in TrafficStore:\", location);\n  \n    //     if (!location) {\n    //       console.error(\"Location is not set. Cannot fetch traffic updates.\");\n    //       return;\n    //     }\n  \n    //     const { latitude, longitude } = location;\n    //     console.log(\"Fetching traffic updates for:\", latitude, longitude);\n  \n    //     const data = await fetchTrafficUpdatesData(latitude, longitude);\n    //     const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n  \n    //     const extractedUpdates: TrafficUpdate[] = situations.flatMap(\n    //       (situation: any) =>\n    //         situation.Deviation.map((deviation: any) => ({\n    //           MessageCode: deviation.MessageCode,\n    //           Message: deviation.Message,\n    //           SeverityText: deviation.SeverityText,\n    //           CreationTime: deviation.CreationTime,\n    //           LocationDescriptor: deviation.LocationDescriptor,\n    //         }))\n    //     );\n  \n    //     set({ trafficUpdates: extractedUpdates });\n  \n    //     console.log(\"Fetched traffic updates:\", extractedUpdates);\n    //   } catch (error) {\n    //     console.error(\"Failed to load data:\", error);\n    //   }\n    // };\n  \n    // return {\n    //   trafficUpdates: [],\n    //   fetchTrafficUpdates,\n    // };\n    \n  });\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAqB9B,OAAO,MAAMC,eAAe,GAAGD,MAAM,CAAgBE,GAAG,IAAK;EAC3D;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;AAAA,CAED,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}