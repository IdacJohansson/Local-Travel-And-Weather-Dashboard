{"ast":null,"code":"import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\nexport const useTrafficStore = create(set => {\n  // const fetchTrafficUpdates = async () => {\n  //   try {\n  //     const { location } = useLocationStore.getState();\n  //     console.log(\"Location in TrafficStore:\", location);\n\n  //     if (!location) {\n  //       console.error(\"Location is not set. Cannot fetch traffic updates.\");\n  //       return;\n  //     }\n\n  //     const { latitude, longitude } = location;\n  //     console.log(\"Fetching traffic updates for:\", latitude, longitude);\n\n  //     const data = await fetchTrafficUpdatesData(latitude, longitude);\n  //     const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n\n  //     const extractedUpdates: TrafficUpdate[] = situations.flatMap(\n  //       (situation: any) =>\n  //         situation.Deviation.map((deviation: any) => ({\n  //           MessageCode: deviation.MessageCode,\n  //           Message: deviation.Message,\n  //           SeverityText: deviation.SeverityText,\n  //           CreationTime: deviation.CreationTime,\n  //           LocationDescriptor: deviation.LocationDescriptor,\n  //         }))\n  //     );\n\n  //     set({ trafficUpdates: extractedUpdates });\n\n  //     console.log(\"Fetched traffic updates:\", extractedUpdates);\n  //   } catch (error) {\n  //     console.error(\"Failed to load data:\", error);\n  //   }\n  // };\n\n  // return {\n  //   trafficUpdates: [],\n  //   fetchTrafficUpdates,\n  // };\n  const fetchTrafficUpdates = async () => {\n    try {\n      const {\n        location\n      } = useLocationStore.getState();\n      if (!location) {\n        console.error(\"Location is not set. Cannot fetch traffic updates.\");\n        return;\n      }\n      const {\n        latitude,\n        longitude\n      } = location;\n      console.log(\"Fetching traffic updates for:\", latitude, longitude);\n      const data = await fetchTrafficUpdatesData(latitude, longitude);\n      console.log(\"Full API response:\", data); // <--- Lägg till denna rad för att debugga\n\n      const extractedUpdates = data.trafficUpdates.flatMap(situation => situation.Deviation.map(deviation => ({\n        MessageCode: deviation.MessageCode,\n        Message: deviation.Message,\n        SeverityText: deviation.SeverityText,\n        CreationTime: deviation.CreationTime,\n        LocationDescriptor: deviation.LocationDescriptor\n      })));\n      set({\n        trafficUpdates: extractedUpdates\n      });\n      console.log(\"Filtered traffic updates:\", extractedUpdates);\n    } catch (error) {\n      console.error(\"Failed to load data:\", error);\n    }\n  };\n});","map":{"version":3,"names":["create","fetchTrafficUpdatesData","useLocationStore","useTrafficStore","set","fetchTrafficUpdates","location","getState","console","error","latitude","longitude","log","data","extractedUpdates","trafficUpdates","flatMap","situation","Deviation","map","deviation","MessageCode","Message","SeverityText","CreationTime","LocationDescriptor"],"sources":["/Users/ida/VS-codeProjects/Local-Travel-And-Weather-Dashboard/my-app/src/store/useTrafficStore.tsx"],"sourcesContent":["import { create } from \"zustand\";\nimport { fetchTrafficUpdatesData } from \"../services/apiService\";\nimport { useLocationStore } from \"./useLocationStore\";\n\nexport interface TrafficUpdate {\n  MessageCode: string;\n  Message: string;\n  SeverityText: string;\n  CreationTime: string;\n  LocationDescriptor: string;\n  Geometry?: {\n    WGS84: string;\n  };\n}\n\nexport interface TrafficState {\n    trafficUpdates: TrafficUpdate[];\n    fetchTrafficUpdates: () => Promise<void>;\n  }\n\n\n  export const useTrafficStore = create<TrafficState>((set) => {\n    // const fetchTrafficUpdates = async () => {\n    //   try {\n    //     const { location } = useLocationStore.getState();\n    //     console.log(\"Location in TrafficStore:\", location);\n  \n    //     if (!location) {\n    //       console.error(\"Location is not set. Cannot fetch traffic updates.\");\n    //       return;\n    //     }\n  \n    //     const { latitude, longitude } = location;\n    //     console.log(\"Fetching traffic updates for:\", latitude, longitude);\n  \n    //     const data = await fetchTrafficUpdatesData(latitude, longitude);\n    //     const situations = data.RESPONSE.RESULT[0]?.Situation || [];\n  \n    //     const extractedUpdates: TrafficUpdate[] = situations.flatMap(\n    //       (situation: any) =>\n    //         situation.Deviation.map((deviation: any) => ({\n    //           MessageCode: deviation.MessageCode,\n    //           Message: deviation.Message,\n    //           SeverityText: deviation.SeverityText,\n    //           CreationTime: deviation.CreationTime,\n    //           LocationDescriptor: deviation.LocationDescriptor,\n    //         }))\n    //     );\n  \n    //     set({ trafficUpdates: extractedUpdates });\n  \n    //     console.log(\"Fetched traffic updates:\", extractedUpdates);\n    //   } catch (error) {\n    //     console.error(\"Failed to load data:\", error);\n    //   }\n    // };\n  \n    // return {\n    //   trafficUpdates: [],\n    //   fetchTrafficUpdates,\n    // };\n    const fetchTrafficUpdates = async () => {\n  try {\n    const { location } = useLocationStore.getState();\n    if (!location) {\n      console.error(\"Location is not set. Cannot fetch traffic updates.\");\n      return;\n    }\n\n    const { latitude, longitude } = location;\n    console.log(\"Fetching traffic updates for:\", latitude, longitude);\n\n    const data = await fetchTrafficUpdatesData(latitude, longitude);\n    console.log(\"Full API response:\", data);  // <--- Lägg till denna rad för att debugga\n\n    const extractedUpdates: TrafficUpdate[] = data.trafficUpdates.flatMap(\n      (situation: any) =>\n        situation.Deviation.map((deviation: any) => ({\n          MessageCode: deviation.MessageCode,\n          Message: deviation.Message,\n          SeverityText: deviation.SeverityText,\n          CreationTime: deviation.CreationTime,\n          LocationDescriptor: deviation.LocationDescriptor,\n        }))\n    );\n\n    set({ trafficUpdates: extractedUpdates });\n\n    console.log(\"Filtered traffic updates:\", extractedUpdates);\n  } catch (error) {\n    console.error(\"Failed to load data:\", error);\n  }\n};\n  });\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,uBAAuB,QAAQ,wBAAwB;AAChE,SAASC,gBAAgB,QAAQ,oBAAoB;AAmBnD,OAAO,MAAMC,eAAe,GAAGH,MAAM,CAAgBI,GAAG,IAAK;EAC3D;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IAC1C,IAAI;MACF,MAAM;QAAEC;MAAS,CAAC,GAAGJ,gBAAgB,CAACK,QAAQ,CAAC,CAAC;MAChD,IAAI,CAACD,QAAQ,EAAE;QACbE,OAAO,CAACC,KAAK,CAAC,oDAAoD,CAAC;QACnE;MACF;MAEA,MAAM;QAAEC,QAAQ;QAAEC;MAAU,CAAC,GAAGL,QAAQ;MACxCE,OAAO,CAACI,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,EAAEC,SAAS,CAAC;MAEjE,MAAME,IAAI,GAAG,MAAMZ,uBAAuB,CAACS,QAAQ,EAAEC,SAAS,CAAC;MAC/DH,OAAO,CAACI,GAAG,CAAC,oBAAoB,EAAEC,IAAI,CAAC,CAAC,CAAE;;MAE1C,MAAMC,gBAAiC,GAAGD,IAAI,CAACE,cAAc,CAACC,OAAO,CAClEC,SAAc,IACbA,SAAS,CAACC,SAAS,CAACC,GAAG,CAAEC,SAAc,KAAM;QAC3CC,WAAW,EAAED,SAAS,CAACC,WAAW;QAClCC,OAAO,EAAEF,SAAS,CAACE,OAAO;QAC1BC,YAAY,EAAEH,SAAS,CAACG,YAAY;QACpCC,YAAY,EAAEJ,SAAS,CAACI,YAAY;QACpCC,kBAAkB,EAAEL,SAAS,CAACK;MAChC,CAAC,CAAC,CACN,CAAC;MAEDrB,GAAG,CAAC;QAAEW,cAAc,EAAED;MAAiB,CAAC,CAAC;MAEzCN,OAAO,CAACI,GAAG,CAAC,2BAA2B,EAAEE,gBAAgB,CAAC;IAC5D,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;AACC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}